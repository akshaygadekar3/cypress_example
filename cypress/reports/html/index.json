{
  "stats": {
    "suites": 20,
    "tests": 124,
    "passes": 124,
    "pending": 0,
    "failures": 0,
    "testsRegistered": 124,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "start": "2023-05-27T10:50:05.085Z",
    "end": "2023-05-27T11:00:46.763Z",
    "duration": 641678
  },
  "results": [
    {
      "uuid": "7b578801-2cce-415a-9bf7-35366e39b2d8",
      "title": "",
      "fullFile": "cypress/e2e/2-advanced-examples/actions.cy.js",
      "file": "cypress/e2e/2-advanced-examples/actions.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "2fda380a-783d-4b33-9432-87b8ecce3a7a",
          "title": "Actions",
          "fullFile": "cypress/e2e/2-advanced-examples/actions.cy.js",
          "file": "cypress/e2e/2-advanced-examples/actions.cy.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": ".type() - type into a DOM element",
              "fullTitle": "Actions .type() - type into a DOM element",
              "timedOut": null,
              "duration": 33078,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/actions.cy.js.mp4\"\n    }\n]",
              "code": "// https://on.cypress.io/type\ncy.get('.action-email').type('fake@email.com').should('have.value', 'fake@email.com')\n// .type() with special character sequences\n.type('{leftarrow}{rightarrow}{uparrow}{downarrow}').type('{del}{selectall}{backspace}')\n// .type() with key modifiers\n.type('{alt}{option}') //these are equivalent\n.type('{ctrl}{control}') //these are equivalent\n.type('{meta}{command}{cmd}') //these are equivalent\n.type('{shift}')\n// Delay each keypress by 0.1 sec\n.type('slow.typing@email.com', {\n  delay: 100\n}).should('have.value', 'slow.typing@email.com');\ncy.get('.action-disabled')\n// Ignore error checking prior to type\n// like whether the input is visible or disabled\n.type('disabled error checking', {\n  force: true\n}).should('have.value', 'disabled error checking');",
              "err": {},
              "uuid": "3f83553a-3195-4493-84c2-2027e09d9085",
              "parentUUID": "2fda380a-783d-4b33-9432-87b8ecce3a7a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".focus() - focus on a DOM element",
              "fullTitle": "Actions .focus() - focus on a DOM element",
              "timedOut": null,
              "duration": 1515,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/actions.cy.js.mp4\"\n    }\n]",
              "code": "// https://on.cypress.io/focus\ncy.get('.action-focus').focus().should('have.class', 'focus').prev().should('have.attr', 'style', 'color: orange;');",
              "err": {},
              "uuid": "34d94e1f-d8ff-467b-8c4f-377a54e931c0",
              "parentUUID": "2fda380a-783d-4b33-9432-87b8ecce3a7a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".blur() - blur off a DOM element",
              "fullTitle": "Actions .blur() - blur off a DOM element",
              "timedOut": null,
              "duration": 1132,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/actions.cy.js.mp4\"\n    }\n]",
              "code": "// https://on.cypress.io/blur\ncy.get('.action-blur').type('About to blur').blur().should('have.class', 'error').prev().should('have.attr', 'style', 'color: red;');",
              "err": {},
              "uuid": "588a9fb9-16d0-4a81-9d5a-595383c4fc9c",
              "parentUUID": "2fda380a-783d-4b33-9432-87b8ecce3a7a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".clear() - clears an input or textarea element",
              "fullTitle": "Actions .clear() - clears an input or textarea element",
              "timedOut": null,
              "duration": 1924,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/actions.cy.js.mp4\"\n    }\n]",
              "code": "// https://on.cypress.io/clear\ncy.get('.action-clear').type('Clear this text').should('have.value', 'Clear this text').clear().should('have.value', '');",
              "err": {},
              "uuid": "9921f3c5-9218-4814-9e23-cea5a04c4f5c",
              "parentUUID": "2fda380a-783d-4b33-9432-87b8ecce3a7a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".submit() - submit a form",
              "fullTitle": "Actions .submit() - submit a form",
              "timedOut": null,
              "duration": 935,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/actions.cy.js.mp4\"\n    }\n]",
              "code": "// https://on.cypress.io/submit\ncy.get('.action-form').find('[type=\"text\"]').type('HALFOFF');\ncy.get('.action-form').submit().next().should('contain', 'Your form has been submitted!');",
              "err": {},
              "uuid": "2b6879f5-a88d-49dd-9542-e91e1f356fd0",
              "parentUUID": "2fda380a-783d-4b33-9432-87b8ecce3a7a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".click() - click on a DOM element",
              "fullTitle": "Actions .click() - click on a DOM element",
              "timedOut": null,
              "duration": 5974,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/actions.cy.js.mp4\"\n    }\n]",
              "code": "// https://on.cypress.io/click\ncy.get('.action-btn').click();\n// You can click on 9 specific positions of an element:\n//  -----------------------------------\n// | topLeft        top       topRight |\n// |                                   |\n// |                                   |\n// |                                   |\n// | left          center        right |\n// |                                   |\n// |                                   |\n// |                                   |\n// | bottomLeft   bottom   bottomRight |\n//  -----------------------------------\n// clicking in the center of the element is the default\ncy.get('#action-canvas').click();\ncy.get('#action-canvas').click('topLeft');\ncy.get('#action-canvas').click('top');\ncy.get('#action-canvas').click('topRight');\ncy.get('#action-canvas').click('left');\ncy.get('#action-canvas').click('right');\ncy.get('#action-canvas').click('bottomLeft');\ncy.get('#action-canvas').click('bottom');\ncy.get('#action-canvas').click('bottomRight');\n// .click() accepts an x and y coordinate\n// that controls where the click occurs :)\ncy.get('#action-canvas').click(80, 75) // click 80px on x coord and 75px on y coord\n.click(170, 75).click(80, 165).click(100, 185).click(125, 190).click(150, 185).click(170, 165);\n// click multiple elements by passing multiple: true\ncy.get('.action-labels>.label').click({\n  multiple: true\n});\n// Ignore error checking prior to clicking\ncy.get('.action-opacity>.btn').click({\n  force: true\n});",
              "err": {},
              "uuid": "8db1c8b1-fa75-4bad-ae65-4bafb4598e55",
              "parentUUID": "2fda380a-783d-4b33-9432-87b8ecce3a7a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".dblclick() - double click on a DOM element",
              "fullTitle": "Actions .dblclick() - double click on a DOM element",
              "timedOut": null,
              "duration": 991,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/actions.cy.js.mp4\"\n    }\n]",
              "code": "// https://on.cypress.io/dblclick\n// Our app has a listener on 'dblclick' event in our 'scripts.js'\n// that hides the div and shows an input on double click\ncy.get('.action-div').dblclick().should('not.be.visible');\ncy.get('.action-input-hidden').should('be.visible');",
              "err": {},
              "uuid": "f29f69a8-d7f2-4303-9736-1d89caecc8e7",
              "parentUUID": "2fda380a-783d-4b33-9432-87b8ecce3a7a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".rightclick() - right click on a DOM element",
              "fullTitle": "Actions .rightclick() - right click on a DOM element",
              "timedOut": null,
              "duration": 1347,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/actions.cy.js.mp4\"\n    }\n]",
              "code": "// https://on.cypress.io/rightclick\n// Our app has a listener on 'contextmenu' event in our 'scripts.js'\n// that hides the div and shows an input on right click\ncy.get('.rightclick-action-div').rightclick().should('not.be.visible');\ncy.get('.rightclick-action-input-hidden').should('be.visible');",
              "err": {},
              "uuid": "291c8136-56ce-40af-8aef-dc274ccb8f02",
              "parentUUID": "2fda380a-783d-4b33-9432-87b8ecce3a7a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".check() - check a checkbox or radio element",
              "fullTitle": "Actions .check() - check a checkbox or radio element",
              "timedOut": null,
              "duration": 1969,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/actions.cy.js.mp4\"\n    }\n]",
              "code": "// https://on.cypress.io/check\n// By default, .check() will check all\n// matching checkbox or radio elements in succession, one after another\ncy.get('.action-checkboxes [type=\"checkbox\"]').not('[disabled]').check().should('be.checked');\ncy.get('.action-radios [type=\"radio\"]').not('[disabled]').check().should('be.checked');\n// .check() accepts a value argument\ncy.get('.action-radios [type=\"radio\"]').check('radio1').should('be.checked');\n// .check() accepts an array of values\ncy.get('.action-multiple-checkboxes [type=\"checkbox\"]').check(['checkbox1', 'checkbox2']).should('be.checked');\n// Ignore error checking prior to checking\ncy.get('.action-checkboxes [disabled]').check({\n  force: true\n}).should('be.checked');\ncy.get('.action-radios [type=\"radio\"]').check('radio3', {\n  force: true\n}).should('be.checked');",
              "err": {},
              "uuid": "eec814f8-c5a2-4fd8-a44a-3a69e5b7a744",
              "parentUUID": "2fda380a-783d-4b33-9432-87b8ecce3a7a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".uncheck() - uncheck a checkbox element",
              "fullTitle": "Actions .uncheck() - uncheck a checkbox element",
              "timedOut": null,
              "duration": 2827,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/actions.cy.js.mp4\"\n    }\n]",
              "code": "// https://on.cypress.io/uncheck\n// By default, .uncheck() will uncheck all matching\n// checkbox elements in succession, one after another\ncy.get('.action-check [type=\"checkbox\"]').not('[disabled]').uncheck().should('not.be.checked');\n// .uncheck() accepts a value argument\ncy.get('.action-check [type=\"checkbox\"]').check('checkbox1').uncheck('checkbox1').should('not.be.checked');\n// .uncheck() accepts an array of values\ncy.get('.action-check [type=\"checkbox\"]').check(['checkbox1', 'checkbox3']).uncheck(['checkbox1', 'checkbox3']).should('not.be.checked');\n// Ignore error checking prior to unchecking\ncy.get('.action-check [disabled]').uncheck({\n  force: true\n}).should('not.be.checked');",
              "err": {},
              "uuid": "c19cf2be-8df6-4af7-abe8-035fa6641764",
              "parentUUID": "2fda380a-783d-4b33-9432-87b8ecce3a7a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".select() - select an option in a <select> element",
              "fullTitle": "Actions .select() - select an option in a <select> element",
              "timedOut": null,
              "duration": 2608,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/actions.cy.js.mp4\"\n    }\n]",
              "code": "// https://on.cypress.io/select\n// at first, no option should be selected\ncy.get('.action-select').should('have.value', '--Select a fruit--');\n// Select option(s) with matching text content\ncy.get('.action-select').select('apples');\n// confirm the apples were selected\n// note that each value starts with \"fr-\" in our HTML\ncy.get('.action-select').should('have.value', 'fr-apples');\ncy.get('.action-select-multiple').select(['apples', 'oranges', 'bananas'])\n// when getting multiple values, invoke \"val\" method first\n.invoke('val').should('deep.equal', ['fr-apples', 'fr-oranges', 'fr-bananas']);\n// Select option(s) with matching value\ncy.get('.action-select').select('fr-bananas')\n// can attach an assertion right away to the element\n.should('have.value', 'fr-bananas');\ncy.get('.action-select-multiple').select(['fr-apples', 'fr-oranges', 'fr-bananas']).invoke('val').should('deep.equal', ['fr-apples', 'fr-oranges', 'fr-bananas']);\n// assert the selected values include oranges\ncy.get('.action-select-multiple').invoke('val').should('include', 'fr-oranges');",
              "err": {},
              "uuid": "8d4e49ff-2450-4f38-af6d-65a230b2db8f",
              "parentUUID": "2fda380a-783d-4b33-9432-87b8ecce3a7a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".scrollIntoView() - scroll an element into view",
              "fullTitle": "Actions .scrollIntoView() - scroll an element into view",
              "timedOut": null,
              "duration": 2168,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/actions.cy.js.mp4\"\n    }\n]",
              "code": "// https://on.cypress.io/scrollintoview\n// normally all of these buttons are hidden,\n// because they're not within\n// the viewable area of their parent\n// (we need to scroll to see them)\ncy.get('#scroll-horizontal button').should('not.be.visible');\n// scroll the button into view, as if the user had scrolled\ncy.get('#scroll-horizontal button').scrollIntoView().should('be.visible');\ncy.get('#scroll-vertical button').should('not.be.visible');\n// Cypress handles the scroll direction needed\ncy.get('#scroll-vertical button').scrollIntoView().should('be.visible');\ncy.get('#scroll-both button').should('not.be.visible');\n// Cypress knows to scroll to the right and down\ncy.get('#scroll-both button').scrollIntoView().should('be.visible');",
              "err": {},
              "uuid": "3d56236f-0f31-4299-8f6a-3f09ac4c643d",
              "parentUUID": "2fda380a-783d-4b33-9432-87b8ecce3a7a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".trigger() - trigger an event on a DOM element",
              "fullTitle": "Actions .trigger() - trigger an event on a DOM element",
              "timedOut": null,
              "duration": 1262,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/actions.cy.js.mp4\"\n    }\n]",
              "code": "// https://on.cypress.io/trigger\n// To interact with a range input (slider)\n// we need to set its value & trigger the\n// event to signal it changed\n// Here, we invoke jQuery's val() method to set\n// the value and trigger the 'change' event\ncy.get('.trigger-input-range').invoke('val', 25).trigger('change').get('input[type=range]').siblings('p').should('have.text', '25');",
              "err": {},
              "uuid": "f1d51764-c2d7-4fcf-9e56-8fc182ea8530",
              "parentUUID": "2fda380a-783d-4b33-9432-87b8ecce3a7a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.scrollTo() - scroll the window or element to a position",
              "fullTitle": "Actions cy.scrollTo() - scroll the window or element to a position",
              "timedOut": null,
              "duration": 2811,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/actions.cy.js.mp4\"\n    }\n]",
              "code": "// https://on.cypress.io/scrollto\n// You can scroll to 9 specific positions of an element:\n//  -----------------------------------\n// | topLeft        top       topRight |\n// |                                   |\n// |                                   |\n// |                                   |\n// | left          center        right |\n// |                                   |\n// |                                   |\n// |                                   |\n// | bottomLeft   bottom   bottomRight |\n//  -----------------------------------\n// if you chain .scrollTo() off of cy, we will\n// scroll the entire window\ncy.scrollTo('bottom');\ncy.get('#scrollable-horizontal').scrollTo('right');\n// or you can scroll to a specific coordinate:\n// (x axis, y axis) in pixels\ncy.get('#scrollable-vertical').scrollTo(250, 250);\n// or you can scroll to a specific percentage\n// of the (width, height) of the element\ncy.get('#scrollable-both').scrollTo('75%', '25%');\n// control the easing of the scroll (default is 'swing')\ncy.get('#scrollable-vertical').scrollTo('center', {\n  easing: 'linear'\n});\n// control the duration of the scroll (in ms)\ncy.get('#scrollable-both').scrollTo('center', {\n  duration: 2000\n});",
              "err": {},
              "uuid": "2aeed402-6cc5-47e4-8277-f75c0b1ffa2c",
              "parentUUID": "2fda380a-783d-4b33-9432-87b8ecce3a7a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3f83553a-3195-4493-84c2-2027e09d9085",
            "34d94e1f-d8ff-467b-8c4f-377a54e931c0",
            "588a9fb9-16d0-4a81-9d5a-595383c4fc9c",
            "9921f3c5-9218-4814-9e23-cea5a04c4f5c",
            "2b6879f5-a88d-49dd-9542-e91e1f356fd0",
            "8db1c8b1-fa75-4bad-ae65-4bafb4598e55",
            "f29f69a8-d7f2-4303-9736-1d89caecc8e7",
            "291c8136-56ce-40af-8aef-dc274ccb8f02",
            "eec814f8-c5a2-4fd8-a44a-3a69e5b7a744",
            "c19cf2be-8df6-4af7-abe8-035fa6641764",
            "8d4e49ff-2450-4f38-af6d-65a230b2db8f",
            "3d56236f-0f31-4299-8f6a-3f09ac4c643d",
            "f1d51764-c2d7-4fcf-9e56-8fc182ea8530",
            "2aeed402-6cc5-47e4-8277-f75c0b1ffa2c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 60541,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "0118af64-f3ce-49c0-b816-a5143521d4ee",
      "title": "",
      "fullFile": "cypress/e2e/2-advanced-examples/aliasing.cy.js",
      "file": "cypress/e2e/2-advanced-examples/aliasing.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "382fb917-9d52-48ad-a356-0165f4f8c53d",
          "title": "Aliasing",
          "fullFile": "cypress/e2e/2-advanced-examples/aliasing.cy.js",
          "file": "cypress/e2e/2-advanced-examples/aliasing.cy.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": ".as() - alias a DOM element for later use",
              "fullTitle": "Aliasing .as() - alias a DOM element for later use",
              "timedOut": null,
              "duration": 4684,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/aliasing.cy.js.mp4\"\n    }\n]",
              "code": "// https://on.cypress.io/as\n// Alias a DOM element for use later\n// We don't have to traverse to the element\n// later in our code, we reference it with @\ncy.get('.as-table').find('tbody>tr').first().find('td').first().find('button').as('firstBtn');\n// when we reference the alias, we place an\n// @ in front of its name\ncy.get('@firstBtn').click();\ncy.get('@firstBtn').should('have.class', 'btn-success').and('contain', 'Changed');",
              "err": {},
              "uuid": "653c408e-50dc-4410-acf1-2ad141d1293b",
              "parentUUID": "382fb917-9d52-48ad-a356-0165f4f8c53d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".as() - alias a route for later use",
              "fullTitle": "Aliasing .as() - alias a route for later use",
              "timedOut": null,
              "duration": 2463,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/aliasing.cy.js.mp4\"\n    }\n]",
              "code": "// Alias the route to wait for its response\ncy.intercept('GET', '**/comments/*').as('getComment');\n// we have code that gets a comment when\n// the button is clicked in scripts.js\ncy.get('.network-btn').click();\n// https://on.cypress.io/wait\ncy.wait('@getComment').its('response.statusCode').should('eq', 200);",
              "err": {},
              "uuid": "65c0591c-a91f-4b70-891a-4777170143a0",
              "parentUUID": "382fb917-9d52-48ad-a356-0165f4f8c53d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "653c408e-50dc-4410-acf1-2ad141d1293b",
            "65c0591c-a91f-4b70-891a-4777170143a0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 7147,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "e4fcad18-5504-49fa-a870-6315cb33534f",
      "title": "",
      "fullFile": "cypress/e2e/2-advanced-examples/assertions.cy.js",
      "file": "cypress/e2e/2-advanced-examples/assertions.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "21b1bed4-aa72-4755-8e2c-113870ce117b",
          "title": "Assertions",
          "fullFile": "cypress/e2e/2-advanced-examples/assertions.cy.js",
          "file": "cypress/e2e/2-advanced-examples/assertions.cy.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "e1564665-be5d-4d19-8f55-661f7e59f55f",
              "title": "Implicit Assertions",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": ".should() - make an assertion about the current subject",
                  "fullTitle": "Assertions Implicit Assertions .should() - make an assertion about the current subject",
                  "timedOut": null,
                  "duration": 15734,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/assertions.cy.js.mp4\"\n    }\n]",
                  "code": "// https://on.cypress.io/should\ncy.get('.assertion-table').find('tbody tr:last').should('have.class', 'success').find('td').first()\n// checking the text of the <td> element in various ways\n.should('have.text', 'Column content').should('contain', 'Column content').should('have.html', 'Column content')\n// chai-jquery uses \"is()\" to check if element matches selector\n.should('match', 'td')\n// to match text content against a regular expression\n// first need to invoke jQuery method text()\n// and then match using regular expression\n.invoke('text').should('match', /column content/i);\n// a better way to check element's text content against a regular expression\n// is to use \"cy.contains\"\n// https://on.cypress.io/contains\ncy.get('.assertion-table').find('tbody tr:last')\n// finds first <td> element with text content matching regular expression\n.contains('td', /column content/i).should('be.visible');\n// for more information about asserting element's text\n// see https://on.cypress.io/using-cypress-faq#How-do-I-get-an-element’s-text-contents",
                  "err": {},
                  "uuid": "89acf54a-e3f4-4e4a-b77d-fa5a7f1f88a9",
                  "parentUUID": "e1564665-be5d-4d19-8f55-661f7e59f55f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": ".and() - chain multiple assertions together",
                  "fullTitle": "Assertions Implicit Assertions .and() - chain multiple assertions together",
                  "timedOut": null,
                  "duration": 1360,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/assertions.cy.js.mp4\"\n    }\n]",
                  "code": "// https://on.cypress.io/and\ncy.get('.assertions-link').should('have.class', 'active').and('have.attr', 'href').and('include', 'cypress.io');",
                  "err": {},
                  "uuid": "aa1a5020-1c2d-4fd3-804c-9c8aa5d3f54f",
                  "parentUUID": "e1564665-be5d-4d19-8f55-661f7e59f55f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "89acf54a-e3f4-4e4a-b77d-fa5a7f1f88a9",
                "aa1a5020-1c2d-4fd3-804c-9c8aa5d3f54f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 17094,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7ea956f1-657c-44d1-9252-da3547227624",
              "title": "Explicit Assertions",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "expect - make an assertion about a specified subject",
                  "fullTitle": "Assertions Explicit Assertions expect - make an assertion about a specified subject",
                  "timedOut": null,
                  "duration": 1232,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/assertions.cy.js.mp4\"\n    }\n]",
                  "code": "// We can use Chai's BDD style assertions\nexpect(true).to.be.true;\nconst o = {\n  foo: 'bar'\n};\nexpect(o).to.equal(o);\nexpect(o).to.deep.equal({\n  foo: 'bar'\n});\n// matching text using regular expression\nexpect('FooBar').to.match(/bar$/i);",
                  "err": {},
                  "uuid": "959e5c45-ffb6-4a5e-91ba-e33afb19a8bd",
                  "parentUUID": "7ea956f1-657c-44d1-9252-da3547227624",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "pass your own callback function to should()",
                  "fullTitle": "Assertions Explicit Assertions pass your own callback function to should()",
                  "timedOut": null,
                  "duration": 1192,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/assertions.cy.js.mp4\"\n    }\n]",
                  "code": "// Pass a function to should that can have any number\n// of explicit assertions within it.\n// The \".should(cb)\" function will be retried\n// automatically until it passes all your explicit assertions or times out.\ncy.get('.assertions-p').find('p').should($p => {\n  // https://on.cypress.io/$\n  // return an array of texts from all of the p's\n  const texts = $p.map((i, el) => Cypress.$(el).text());\n  // jquery map returns jquery object\n  // and .get() convert this to simple array\n  const paragraphs = texts.get();\n  // array should have length of 3\n  expect(paragraphs, 'has 3 paragraphs').to.have.length(3);\n  // use second argument to expect(...) to provide clear\n  // message with each assertion\n  expect(paragraphs, 'has expected text in each paragraph').to.deep.eq(['Some text from first p', 'More text from second p', 'And even more text from third p']);\n});",
                  "err": {},
                  "uuid": "bda438c3-c24f-4f8f-af9e-188c8075b88d",
                  "parentUUID": "7ea956f1-657c-44d1-9252-da3547227624",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "finds element by class name regex",
                  "fullTitle": "Assertions Explicit Assertions finds element by class name regex",
                  "timedOut": null,
                  "duration": 1377,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/assertions.cy.js.mp4\"\n    }\n]",
                  "code": "cy.get('.docs-header').find('div')\n// .should(cb) callback function will be retried\n.should($div => {\n  expect($div).to.have.length(1);\n  const className = $div[0].className;\n  expect(className).to.match(/heading-/);\n})\n// .then(cb) callback is not retried,\n// it either passes or fails\n.then($div => {\n  expect($div, 'text content').to.have.text('Introduction');\n});",
                  "err": {},
                  "uuid": "c2a97564-2621-4511-ad0b-5b56db92ecf8",
                  "parentUUID": "7ea956f1-657c-44d1-9252-da3547227624",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can throw any error",
                  "fullTitle": "Assertions Explicit Assertions can throw any error",
                  "timedOut": null,
                  "duration": 1294,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/assertions.cy.js.mp4\"\n    }\n]",
                  "code": "cy.get('.docs-header').find('div').should($div => {\n  if ($div.length !== 1) {\n    // you can throw your own errors\n    throw new Error('Did not find 1 element');\n  }\n  const className = $div[0].className;\n  if (!className.match(/heading-/)) {\n    throw new Error(`Could not find class \"heading-\" in ${className}`);\n  }\n});",
                  "err": {},
                  "uuid": "cab9a461-763d-407e-917c-47a271f171be",
                  "parentUUID": "7ea956f1-657c-44d1-9252-da3547227624",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "matches unknown text between two elements",
                  "fullTitle": "Assertions Explicit Assertions matches unknown text between two elements",
                  "timedOut": null,
                  "duration": 1257,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/assertions.cy.js.mp4\"\n    }\n]",
                  "code": "/**\n * Text from the first element.\n * @type {string}\n*/\nlet text;\n/**\n * Normalizes passed text,\n * useful before comparing text with spaces and different capitalization.\n * @param {string} s Text to normalize\n*/\nconst normalizeText = s => s.replace(/\\s/g, '').toLowerCase();\ncy.get('.two-elements').find('.first').then($first => {\n  // save text from the first element\n  text = normalizeText($first.text());\n});\ncy.get('.two-elements').find('.second').should($div => {\n  // we can massage text before comparing\n  const secondText = normalizeText($div.text());\n  expect(secondText, 'second text').to.equal(text);\n});",
                  "err": {},
                  "uuid": "e12d989f-5ae5-4648-a3c3-ed44cf9792e2",
                  "parentUUID": "7ea956f1-657c-44d1-9252-da3547227624",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "assert - assert shape of an object",
                  "fullTitle": "Assertions Explicit Assertions assert - assert shape of an object",
                  "timedOut": null,
                  "duration": 1174,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/assertions.cy.js.mp4\"\n    }\n]",
                  "code": "const person = {\n  name: 'Joe',\n  age: 20\n};\nassert.isObject(person, 'value is object');",
                  "err": {},
                  "uuid": "8f67af99-c6ff-4445-8268-a30d443f9648",
                  "parentUUID": "7ea956f1-657c-44d1-9252-da3547227624",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "retries the should callback until assertions pass",
                  "fullTitle": "Assertions Explicit Assertions retries the should callback until assertions pass",
                  "timedOut": null,
                  "duration": 2571,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/assertions.cy.js.mp4\"\n    }\n]",
                  "code": "cy.get('#random-number').should($div => {\n  const n = parseFloat($div.text());\n  expect(n).to.be.gte(1).and.be.lte(10);\n});",
                  "err": {},
                  "uuid": "99ba8eba-4883-4e62-856c-64683e5f1ae4",
                  "parentUUID": "7ea956f1-657c-44d1-9252-da3547227624",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "959e5c45-ffb6-4a5e-91ba-e33afb19a8bd",
                "bda438c3-c24f-4f8f-af9e-188c8075b88d",
                "c2a97564-2621-4511-ad0b-5b56db92ecf8",
                "cab9a461-763d-407e-917c-47a271f171be",
                "e12d989f-5ae5-4648-a3c3-ed44cf9792e2",
                "8f67af99-c6ff-4445-8268-a30d443f9648",
                "99ba8eba-4883-4e62-856c-64683e5f1ae4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 10097,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "b813f2ca-64dd-4e85-bb37-25f36fb7fbc5",
      "title": "",
      "fullFile": "cypress/e2e/2-advanced-examples/connectors.cy.js",
      "file": "cypress/e2e/2-advanced-examples/connectors.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "8835afa2-5bcf-437d-8673-3b8f7faf99ac",
          "title": "Connectors",
          "fullFile": "cypress/e2e/2-advanced-examples/connectors.cy.js",
          "file": "cypress/e2e/2-advanced-examples/connectors.cy.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": ".each() - iterate over an array of elements",
              "fullTitle": "Connectors .each() - iterate over an array of elements",
              "timedOut": null,
              "duration": 13715,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/connectors.cy.js.mp4\"\n    }\n]",
              "code": "// https://on.cypress.io/each\ncy.get('.connectors-each-ul>li').each(($el, index, $list) => {\n  console.log($el, index, $list);\n});",
              "err": {},
              "uuid": "ee1bd0b7-190e-4050-9603-ed5ac7956cd7",
              "parentUUID": "8835afa2-5bcf-437d-8673-3b8f7faf99ac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".its() - get properties on the current subject",
              "fullTitle": "Connectors .its() - get properties on the current subject",
              "timedOut": null,
              "duration": 1342,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/connectors.cy.js.mp4\"\n    }\n]",
              "code": "// https://on.cypress.io/its\ncy.get('.connectors-its-ul>li')\n// calls the 'length' property yielding that value\n.its('length').should('be.gt', 2);",
              "err": {},
              "uuid": "53bc5a2e-f8af-4e7f-8f9b-aa3be5c87562",
              "parentUUID": "8835afa2-5bcf-437d-8673-3b8f7faf99ac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".invoke() - invoke a function on the current subject",
              "fullTitle": "Connectors .invoke() - invoke a function on the current subject",
              "timedOut": null,
              "duration": 1307,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/connectors.cy.js.mp4\"\n    }\n]",
              "code": "// our div is hidden in our script.js\n// $('.connectors-div').hide()\ncy.get('.connectors-div').should('be.hidden');\n// https://on.cypress.io/invoke\n// call the jquery method 'show' on the 'div.container'\ncy.get('.connectors-div').invoke('show');\ncy.get('.connectors-div').should('be.visible');",
              "err": {},
              "uuid": "51540c88-4088-4994-a09b-0b8101d343e4",
              "parentUUID": "8835afa2-5bcf-437d-8673-3b8f7faf99ac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".spread() - spread an array as individual args to callback function",
              "fullTitle": "Connectors .spread() - spread an array as individual args to callback function",
              "timedOut": null,
              "duration": 1343,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/connectors.cy.js.mp4\"\n    }\n]",
              "code": "// https://on.cypress.io/spread\nconst arr = ['foo', 'bar', 'baz'];\ncy.wrap(arr).spread((foo, bar, baz) => {\n  expect(foo).to.eq('foo');\n  expect(bar).to.eq('bar');\n  expect(baz).to.eq('baz');\n});",
              "err": {},
              "uuid": "539c4e1d-b247-49ad-bac9-56c72df9a43f",
              "parentUUID": "8835afa2-5bcf-437d-8673-3b8f7faf99ac",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "58024a88-9200-4a4b-8232-bd30eab30ded",
              "title": ".then()",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "invokes a callback function with the current subject",
                  "fullTitle": "Connectors .then() invokes a callback function with the current subject",
                  "timedOut": null,
                  "duration": 1491,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/connectors.cy.js.mp4\"\n    }\n]",
                  "code": "// https://on.cypress.io/then\ncy.get('.connectors-list > li').then($lis => {\n  expect($lis, '3 items').to.have.length(3);\n  expect($lis.eq(0), 'first item').to.contain('Walk the dog');\n  expect($lis.eq(1), 'second item').to.contain('Feed the cat');\n  expect($lis.eq(2), 'third item').to.contain('Write JavaScript');\n});",
                  "err": {},
                  "uuid": "005398d4-af89-4fd8-a998-84878b7286a9",
                  "parentUUID": "58024a88-9200-4a4b-8232-bd30eab30ded",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "yields the returned value to the next command",
                  "fullTitle": "Connectors .then() yields the returned value to the next command",
                  "timedOut": null,
                  "duration": 1215,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/connectors.cy.js.mp4\"\n    }\n]",
                  "code": "cy.wrap(1).then(num => {\n  expect(num).to.equal(1);\n  return 2;\n}).then(num => {\n  expect(num).to.equal(2);\n});",
                  "err": {},
                  "uuid": "2d624f94-0eac-4cc8-8569-7f31ef347c67",
                  "parentUUID": "58024a88-9200-4a4b-8232-bd30eab30ded",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "yields the original subject without return",
                  "fullTitle": "Connectors .then() yields the original subject without return",
                  "timedOut": null,
                  "duration": 871,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/connectors.cy.js.mp4\"\n    }\n]",
                  "code": "cy.wrap(1).then(num => {\n  expect(num).to.equal(1);\n  // note that nothing is returned from this callback\n}).then(num => {\n  // this callback receives the original unchanged value 1\n  expect(num).to.equal(1);\n});",
                  "err": {},
                  "uuid": "c0da23d0-561c-4800-bbd0-61c47e37e7cb",
                  "parentUUID": "58024a88-9200-4a4b-8232-bd30eab30ded",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "yields the value yielded by the last Cypress command inside",
                  "fullTitle": "Connectors .then() yields the value yielded by the last Cypress command inside",
                  "timedOut": null,
                  "duration": 700,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/connectors.cy.js.mp4\"\n    }\n]",
                  "code": "cy.wrap(1).then(num => {\n  expect(num).to.equal(1);\n  // note how we run a Cypress command\n  // the result yielded by this Cypress command\n  // will be passed to the second \".then\"\n  cy.wrap(2);\n}).then(num => {\n  // this callback receives the value yielded by \"cy.wrap(2)\"\n  expect(num).to.equal(2);\n});",
                  "err": {},
                  "uuid": "509987b7-cc3d-4a0c-af39-b0612c90fc29",
                  "parentUUID": "58024a88-9200-4a4b-8232-bd30eab30ded",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "005398d4-af89-4fd8-a998-84878b7286a9",
                "2d624f94-0eac-4cc8-8569-7f31ef347c67",
                "c0da23d0-561c-4800-bbd0-61c47e37e7cb",
                "509987b7-cc3d-4a0c-af39-b0612c90fc29"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4277,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "ee1bd0b7-190e-4050-9603-ed5ac7956cd7",
            "53bc5a2e-f8af-4e7f-8f9b-aa3be5c87562",
            "51540c88-4088-4994-a09b-0b8101d343e4",
            "539c4e1d-b247-49ad-bac9-56c72df9a43f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 17707,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "79b0b960-a97d-4de2-8515-dc624dcef9de",
      "title": "",
      "fullFile": "cypress/e2e/2-advanced-examples/cookies.cy.js",
      "file": "cypress/e2e/2-advanced-examples/cookies.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "f61d92d9-6779-4bc5-88f9-a0063483e5ee",
          "title": "Cookies",
          "fullFile": "cypress/e2e/2-advanced-examples/cookies.cy.js",
          "file": "cypress/e2e/2-advanced-examples/cookies.cy.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "cy.getCookie() - get a browser cookie",
              "fullTitle": "Cookies cy.getCookie() - get a browser cookie",
              "timedOut": null,
              "duration": 4404,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/cookies.cy.js.mp4\"\n    }\n]",
              "code": "// https://on.cypress.io/getcookie\ncy.get('#getCookie .set-a-cookie').click();\n// cy.getCookie() yields a cookie object\ncy.getCookie('token').should('have.property', 'value', '123ABC');",
              "err": {},
              "uuid": "8e288e98-93b1-430b-8304-94b325c36310",
              "parentUUID": "f61d92d9-6779-4bc5-88f9-a0063483e5ee",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.getCookies() - get browser cookies for the current domain",
              "fullTitle": "Cookies cy.getCookies() - get browser cookies for the current domain",
              "timedOut": null,
              "duration": 601,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/cookies.cy.js.mp4\"\n    }\n]",
              "code": "// https://on.cypress.io/getcookies\ncy.getCookies().should('be.empty');\ncy.get('#getCookies .set-a-cookie').click();\n// cy.getCookies() yields an array of cookies\ncy.getCookies().should('have.length', 1).should(cookies => {\n  // each cookie has these properties\n  expect(cookies[0]).to.have.property('name', 'token');\n  expect(cookies[0]).to.have.property('value', '123ABC');\n  expect(cookies[0]).to.have.property('httpOnly', false);\n  expect(cookies[0]).to.have.property('secure', false);\n  expect(cookies[0]).to.have.property('domain');\n  expect(cookies[0]).to.have.property('path');\n});",
              "err": {},
              "uuid": "2483d3ee-cb94-418e-9dc0-6f259e483ddd",
              "parentUUID": "f61d92d9-6779-4bc5-88f9-a0063483e5ee",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.getAllCookies() - get all browser cookies",
              "fullTitle": "Cookies cy.getAllCookies() - get all browser cookies",
              "timedOut": null,
              "duration": 450,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/cookies.cy.js.mp4\"\n    }\n]",
              "code": "// https://on.cypress.io/getallcookies\ncy.getAllCookies().should('be.empty');\ncy.setCookie('key', 'value');\ncy.setCookie('key', 'value', {\n  domain: '.example.com'\n});\n// cy.getAllCookies() yields an array of cookies\ncy.getAllCookies().should('have.length', 2).should(cookies => {\n  // each cookie has these properties\n  expect(cookies[0]).to.have.property('name', 'key');\n  expect(cookies[0]).to.have.property('value', 'value');\n  expect(cookies[0]).to.have.property('httpOnly', false);\n  expect(cookies[0]).to.have.property('secure', false);\n  expect(cookies[0]).to.have.property('domain');\n  expect(cookies[0]).to.have.property('path');\n  expect(cookies[1]).to.have.property('name', 'key');\n  expect(cookies[1]).to.have.property('value', 'value');\n  expect(cookies[1]).to.have.property('httpOnly', false);\n  expect(cookies[1]).to.have.property('secure', false);\n  expect(cookies[1]).to.have.property('domain', '.example.com');\n  expect(cookies[1]).to.have.property('path');\n});",
              "err": {},
              "uuid": "2dd1236e-c950-4682-be4e-a4e082e88f3d",
              "parentUUID": "f61d92d9-6779-4bc5-88f9-a0063483e5ee",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.setCookie() - set a browser cookie",
              "fullTitle": "Cookies cy.setCookie() - set a browser cookie",
              "timedOut": null,
              "duration": 467,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/cookies.cy.js.mp4\"\n    }\n]",
              "code": "// https://on.cypress.io/setcookie\ncy.getCookies().should('be.empty');\ncy.setCookie('foo', 'bar');\n// cy.getCookie() yields a cookie object\ncy.getCookie('foo').should('have.property', 'value', 'bar');",
              "err": {},
              "uuid": "1da0ba3a-512c-4a2f-91bf-0dfc4cbccc21",
              "parentUUID": "f61d92d9-6779-4bc5-88f9-a0063483e5ee",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.clearCookie() - clear a browser cookie",
              "fullTitle": "Cookies cy.clearCookie() - clear a browser cookie",
              "timedOut": null,
              "duration": 582,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/cookies.cy.js.mp4\"\n    }\n]",
              "code": "// https://on.cypress.io/clearcookie\ncy.getCookie('token').should('be.null');\ncy.get('#clearCookie .set-a-cookie').click();\ncy.getCookie('token').should('have.property', 'value', '123ABC');\n// cy.clearCookies() yields null\ncy.clearCookie('token').should('be.null');\ncy.getCookie('token').should('be.null');",
              "err": {},
              "uuid": "1f1f6b32-5d9b-41e6-ab0c-a3144d593785",
              "parentUUID": "f61d92d9-6779-4bc5-88f9-a0063483e5ee",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.clearCookies() - clear browser cookies for the current domain",
              "fullTitle": "Cookies cy.clearCookies() - clear browser cookies for the current domain",
              "timedOut": null,
              "duration": 582,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/cookies.cy.js.mp4\"\n    }\n]",
              "code": "// https://on.cypress.io/clearcookies\ncy.getCookies().should('be.empty');\ncy.get('#clearCookies .set-a-cookie').click();\ncy.getCookies().should('have.length', 1);\n// cy.clearCookies() yields null\ncy.clearCookies();\ncy.getCookies().should('be.empty');",
              "err": {},
              "uuid": "c82fe9fa-5b2a-4124-b2da-42835c706e15",
              "parentUUID": "f61d92d9-6779-4bc5-88f9-a0063483e5ee",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.clearAllCookies() - clear all browser cookies",
              "fullTitle": "Cookies cy.clearAllCookies() - clear all browser cookies",
              "timedOut": null,
              "duration": 444,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/cookies.cy.js.mp4\"\n    }\n]",
              "code": "// https://on.cypress.io/clearallcookies\ncy.getAllCookies().should('be.empty');\ncy.setCookie('key', 'value');\ncy.setCookie('key', 'value', {\n  domain: '.example.com'\n});\ncy.getAllCookies().should('have.length', 2);\n// cy.clearAllCookies() yields null\ncy.clearAllCookies();\ncy.getAllCookies().should('be.empty');",
              "err": {},
              "uuid": "987d696d-b61e-4e5b-8312-6b2184b5e5c3",
              "parentUUID": "f61d92d9-6779-4bc5-88f9-a0063483e5ee",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8e288e98-93b1-430b-8304-94b325c36310",
            "2483d3ee-cb94-418e-9dc0-6f259e483ddd",
            "2dd1236e-c950-4682-be4e-a4e082e88f3d",
            "1da0ba3a-512c-4a2f-91bf-0dfc4cbccc21",
            "1f1f6b32-5d9b-41e6-ab0c-a3144d593785",
            "c82fe9fa-5b2a-4124-b2da-42835c706e15",
            "987d696d-b61e-4e5b-8312-6b2184b5e5c3"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 7530,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "02bcfc92-e332-44e6-82a9-925d1d90bce5",
      "title": "",
      "fullFile": "cypress/e2e/2-advanced-examples/cypress_api.cy.js",
      "file": "cypress/e2e/2-advanced-examples/cypress_api.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "eae742b5-27b7-4f80-88f2-71f04c03870a",
          "title": "Cypress APIs",
          "fullFile": "cypress/e2e/2-advanced-examples/cypress_api.cy.js",
          "file": "cypress/e2e/2-advanced-examples/cypress_api.cy.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "e59fdb8d-5e80-4dc6-ab04-12eaef002423",
              "title": "Cypress.Commands",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": ".add() - create a custom command",
                  "fullTitle": "Cypress APIs Cypress.Commands .add() - create a custom command",
                  "timedOut": null,
                  "duration": 1919,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/cypress_api.cy.js.mp4\"\n    }\n]",
                  "code": "Cypress.Commands.add('console', {\n  prevSubject: true\n}, (subject, method) => {\n  // the previous subject is automatically received\n  // and the commands arguments are shifted\n  // allow us to change the console method used\n  method = method || 'log';\n  // log the subject to the console\n  console[method]('The subject is', subject);\n  // whatever we return becomes the new subject\n  // we don't want to change the subject so\n  // we return whatever was passed in\n  return subject;\n});\ncy.get('button').console('info').then($button => {\n  // subject is still $button\n});",
                  "err": {},
                  "uuid": "63a852e6-1cdb-4357-8055-5fda7c68beaa",
                  "parentUUID": "e59fdb8d-5e80-4dc6-ab04-12eaef002423",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "63a852e6-1cdb-4357-8055-5fda7c68beaa"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1919,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e7102990-4d98-4cc2-af2c-a7050b3815fd",
              "title": "Cypress.Cookies",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": ".debug() - enable or disable debugging",
                  "fullTitle": "Cypress APIs Cypress.Cookies .debug() - enable or disable debugging",
                  "timedOut": null,
                  "duration": 535,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/cypress_api.cy.js.mp4\"\n    }\n]",
                  "code": "Cypress.Cookies.debug(true);\n// Cypress will now log in the console when\n// cookies are set or cleared\ncy.setCookie('fakeCookie', '123ABC');\ncy.clearCookie('fakeCookie');\ncy.setCookie('fakeCookie', '123ABC');\ncy.clearCookie('fakeCookie');\ncy.setCookie('fakeCookie', '123ABC');",
                  "err": {},
                  "uuid": "d04549a1-927b-425e-8251-ac9eb1029593",
                  "parentUUID": "e7102990-4d98-4cc2-af2c-a7050b3815fd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d04549a1-927b-425e-8251-ac9eb1029593"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 535,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "83ff8d68-6033-4bda-bddd-12a31e9b623e",
              "title": "Cypress.arch",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Get CPU architecture name of underlying OS",
                  "fullTitle": "Cypress APIs Cypress.arch Get CPU architecture name of underlying OS",
                  "timedOut": null,
                  "duration": 372,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/cypress_api.cy.js.mp4\"\n    }\n]",
                  "code": "// https://on.cypress.io/arch\nexpect(Cypress.arch).to.exist;",
                  "err": {},
                  "uuid": "d9c0c728-a06f-4e52-b532-c36175c3a688",
                  "parentUUID": "83ff8d68-6033-4bda-bddd-12a31e9b623e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d9c0c728-a06f-4e52-b532-c36175c3a688"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 372,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ae353f12-f24d-4353-9bce-bcfc3f19aaf5",
              "title": "Cypress.config()",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Get and set configuration options",
                  "fullTitle": "Cypress APIs Cypress.config() Get and set configuration options",
                  "timedOut": null,
                  "duration": 432,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/cypress_api.cy.js.mp4\"\n    }\n]",
                  "code": "// https://on.cypress.io/config\nlet myConfig = Cypress.config();\nexpect(myConfig).to.have.property('animationDistanceThreshold', 5);\nexpect(myConfig).to.have.property('baseUrl', null);\nexpect(myConfig).to.have.property('defaultCommandTimeout', 4000);\nexpect(myConfig).to.have.property('requestTimeout', 5000);\nexpect(myConfig).to.have.property('responseTimeout', 30000);\nexpect(myConfig).to.have.property('viewportHeight', 660);\nexpect(myConfig).to.have.property('viewportWidth', 1000);\nexpect(myConfig).to.have.property('pageLoadTimeout', 60000);\nexpect(myConfig).to.have.property('waitForAnimations', true);\nexpect(Cypress.config('pageLoadTimeout')).to.eq(60000);\n// this will change the config for the rest of your tests!\nCypress.config('pageLoadTimeout', 20000);\nexpect(Cypress.config('pageLoadTimeout')).to.eq(20000);\nCypress.config('pageLoadTimeout', 60000);",
                  "err": {},
                  "uuid": "59d6e149-66f6-4bad-a1b9-5ec7830eff11",
                  "parentUUID": "ae353f12-f24d-4353-9bce-bcfc3f19aaf5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "59d6e149-66f6-4bad-a1b9-5ec7830eff11"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 432,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "13d4ec96-d85b-4283-a17a-965e77864d54",
              "title": "Cypress.dom",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": ".isHidden() - determine if a DOM element is hidden",
                  "fullTitle": "Cypress APIs Cypress.dom .isHidden() - determine if a DOM element is hidden",
                  "timedOut": null,
                  "duration": 358,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/cypress_api.cy.js.mp4\"\n    }\n]",
                  "code": "let hiddenP = Cypress.$('.dom-p p.hidden').get(0);\nlet visibleP = Cypress.$('.dom-p p.visible').get(0);\n// our first paragraph has css class 'hidden'\nexpect(Cypress.dom.isHidden(hiddenP)).to.be.true;\nexpect(Cypress.dom.isHidden(visibleP)).to.be.false;",
                  "err": {},
                  "uuid": "fb0c0e76-0cb3-49e3-9d33-a17d754fca23",
                  "parentUUID": "13d4ec96-d85b-4283-a17a-965e77864d54",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fb0c0e76-0cb3-49e3-9d33-a17d754fca23"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 358,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0bac896e-92af-439a-ace9-0c87fe7a7a4c",
              "title": "Cypress.env()",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Get environment variables",
                  "fullTitle": "Cypress APIs Cypress.env() Get environment variables",
                  "timedOut": null,
                  "duration": 351,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/cypress_api.cy.js.mp4\"\n    }\n]",
                  "code": "// https://on.cypress.io/env\n// set multiple environment variables\nCypress.env({\n  host: 'veronica.dev.local',\n  api_server: 'http://localhost:8888/v1/'\n});\n// get environment variable\nexpect(Cypress.env('host')).to.eq('veronica.dev.local');\n// set environment variable\nCypress.env('api_server', 'http://localhost:8888/v2/');\nexpect(Cypress.env('api_server')).to.eq('http://localhost:8888/v2/');\n// get all environment variable\nexpect(Cypress.env()).to.have.property('host', 'veronica.dev.local');\nexpect(Cypress.env()).to.have.property('api_server', 'http://localhost:8888/v2/');",
                  "err": {},
                  "uuid": "e55d3f0d-b2ab-4f3c-b17b-d6ce4e6bc7c7",
                  "parentUUID": "0bac896e-92af-439a-ace9-0c87fe7a7a4c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e55d3f0d-b2ab-4f3c-b17b-d6ce4e6bc7c7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 351,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "303d47f6-bd6d-49aa-a415-ad2c78914984",
              "title": "Cypress.log",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Control what is printed to the Command Log",
                  "fullTitle": "Cypress APIs Cypress.log Control what is printed to the Command Log",
                  "timedOut": null,
                  "duration": 359,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/cypress_api.cy.js.mp4\"\n    }\n]",
                  "code": "// https://on.cypress.io/cypress-log",
                  "err": {},
                  "uuid": "ffc7ec97-7fb3-47b6-9828-f3a1ab953ac2",
                  "parentUUID": "303d47f6-bd6d-49aa-a415-ad2c78914984",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ffc7ec97-7fb3-47b6-9828-f3a1ab953ac2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 359,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "de7d1b22-70fc-4ec4-ac2f-8bcef819715f",
              "title": "Cypress.platform",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Get underlying OS name",
                  "fullTitle": "Cypress APIs Cypress.platform Get underlying OS name",
                  "timedOut": null,
                  "duration": 382,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/cypress_api.cy.js.mp4\"\n    }\n]",
                  "code": "// https://on.cypress.io/platform\nexpect(Cypress.platform).to.be.exist;",
                  "err": {},
                  "uuid": "a6abbed2-8827-49df-82ce-ac6ea395b430",
                  "parentUUID": "de7d1b22-70fc-4ec4-ac2f-8bcef819715f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a6abbed2-8827-49df-82ce-ac6ea395b430"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 382,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "26e84f4b-4c48-46be-b1c5-3eeb3e8594b7",
              "title": "Cypress.version",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Get current version of Cypress being run",
                  "fullTitle": "Cypress APIs Cypress.version Get current version of Cypress being run",
                  "timedOut": null,
                  "duration": 333,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/cypress_api.cy.js.mp4\"\n    }\n]",
                  "code": "// https://on.cypress.io/version\nexpect(Cypress.version).to.be.exist;",
                  "err": {},
                  "uuid": "ed5ba84a-5783-4ea9-a4bd-0d702ad2328d",
                  "parentUUID": "26e84f4b-4c48-46be-b1c5-3eeb3e8594b7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ed5ba84a-5783-4ea9-a4bd-0d702ad2328d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 333,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5594d629-8668-4371-9192-16e09731961f",
              "title": "Cypress.spec",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Get current spec information",
                  "fullTitle": "Cypress APIs Cypress.spec Get current spec information",
                  "timedOut": null,
                  "duration": 427,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/cypress_api.cy.js.mp4\"\n    }\n]",
                  "code": "// https://on.cypress.io/spec\n// wrap the object so we can inspect it easily by clicking in the command log\ncy.wrap(Cypress.spec).should('include.keys', ['name', 'relative', 'absolute']);",
                  "err": {},
                  "uuid": "3f8bf495-ea29-4c03-b92d-7e68454ceba5",
                  "parentUUID": "5594d629-8668-4371-9192-16e09731961f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3f8bf495-ea29-4c03-b92d-7e68454ceba5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 427,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "926dbd2e-97c4-4a50-8da5-e6b804b9bea8",
      "title": "",
      "fullFile": "cypress/e2e/2-advanced-examples/files.cy.js",
      "file": "cypress/e2e/2-advanced-examples/files.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "b0d52cfb-bd39-4742-80b3-d4d34c99ad0f",
          "title": "Files",
          "fullFile": "cypress/e2e/2-advanced-examples/files.cy.js",
          "file": "cypress/e2e/2-advanced-examples/files.cy.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "cy.fixture() - load a fixture",
              "fullTitle": "Files cy.fixture() - load a fixture",
              "timedOut": null,
              "duration": 2909,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/files.cy.js.mp4\"\n    }\n]",
              "code": "// https://on.cypress.io/fixture\n// Instead of writing a response inline you can\n// use a fixture file's content.\n// when application makes an Ajax request matching \"GET **/comments/*\"\n// Cypress will intercept it and reply with the object in `example.json` fixture\ncy.intercept('GET', '**/comments/*', {\n  fixture: 'example.json'\n}).as('getComment');\n// we have code that gets a comment when\n// the button is clicked in scripts.js\ncy.get('.fixture-btn').click();\ncy.wait('@getComment').its('response.body').should('have.property', 'name').and('include', 'Using fixtures to represent data');",
              "err": {},
              "uuid": "10f90a98-8158-4243-9121-080569117437",
              "parentUUID": "b0d52cfb-bd39-4742-80b3-d4d34c99ad0f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.fixture() or require - load a fixture",
              "fullTitle": "Files cy.fixture() or require - load a fixture",
              "timedOut": null,
              "duration": 372,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/files.cy.js.mp4\"\n    }\n]",
              "code": "// we are inside the \"function () { ... }\"\n// callback and can use test context object \"this\"\n// \"this.example\" was loaded in \"beforeEach\" function callback\nexpect(this.example, 'fixture in the test context').to.deep.equal(requiredExample);\n// or use \"cy.wrap\" and \"should('deep.equal', ...)\" assertion\ncy.wrap(this.example).should('deep.equal', requiredExample);",
              "err": {},
              "uuid": "ed05fa3b-0b2d-49f8-bcc8-da1081c6bc37",
              "parentUUID": "b0d52cfb-bd39-4742-80b3-d4d34c99ad0f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.readFile() - read file contents",
              "fullTitle": "Files cy.readFile() - read file contents",
              "timedOut": null,
              "duration": 364,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/files.cy.js.mp4\"\n    }\n]",
              "code": "// https://on.cypress.io/readfile\n// You can read a file and yield its contents\n// The filePath is relative to your project's root.\ncy.readFile(Cypress.config('configFile')).then(config => {\n  expect(config).to.be.an('string');\n});",
              "err": {},
              "uuid": "a0203f6e-04d0-4bad-bf3f-045a2a5ac5eb",
              "parentUUID": "b0d52cfb-bd39-4742-80b3-d4d34c99ad0f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.writeFile() - write to a file",
              "fullTitle": "Files cy.writeFile() - write to a file",
              "timedOut": null,
              "duration": 1163,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/files.cy.js.mp4\"\n    }\n]",
              "code": "// https://on.cypress.io/writefile\n// You can write to a file\n// Use a response from a request to automatically\n// generate a fixture file for use later\ncy.request('https://jsonplaceholder.cypress.io/users').then(response => {\n  cy.writeFile('cypress/fixtures/users.json', response.body);\n});\ncy.fixture('users').should(users => {\n  expect(users[0].name).to.exist;\n});\n// JavaScript arrays and objects are stringified\n// and formatted into text.\ncy.writeFile('cypress/fixtures/profile.json', {\n  id: 8739,\n  name: 'Jane',\n  email: 'jane@example.com'\n});\ncy.fixture('profile').should(profile => {\n  expect(profile.name).to.eq('Jane');\n});",
              "err": {},
              "uuid": "4000f571-ce16-41f4-8e42-a88496c3b911",
              "parentUUID": "b0d52cfb-bd39-4742-80b3-d4d34c99ad0f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "10f90a98-8158-4243-9121-080569117437",
            "ed05fa3b-0b2d-49f8-bcc8-da1081c6bc37",
            "a0203f6e-04d0-4bad-bf3f-045a2a5ac5eb",
            "4000f571-ce16-41f4-8e42-a88496c3b911"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4808,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "a06f4178-ec44-498d-9df1-6d583dab73f1",
      "title": "",
      "fullFile": "cypress/e2e/2-advanced-examples/location.cy.js",
      "file": "cypress/e2e/2-advanced-examples/location.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "8b5f25c7-555d-4ac4-a49c-0968f41b518a",
          "title": "Location",
          "fullFile": "cypress/e2e/2-advanced-examples/location.cy.js",
          "file": "cypress/e2e/2-advanced-examples/location.cy.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "cy.hash() - get the current URL hash",
              "fullTitle": "Location cy.hash() - get the current URL hash",
              "timedOut": null,
              "duration": 9607,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/location.cy.js.mp4\"\n    }\n]",
              "code": "// https://on.cypress.io/hash\ncy.hash().should('be.empty');",
              "err": {},
              "uuid": "5d7e3331-09e1-459b-aabd-d59a4ad23ea3",
              "parentUUID": "8b5f25c7-555d-4ac4-a49c-0968f41b518a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.location() - get window.location",
              "fullTitle": "Location cy.location() - get window.location",
              "timedOut": null,
              "duration": 555,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/location.cy.js.mp4\"\n    }\n]",
              "code": "// https://on.cypress.io/location\ncy.location().should(location => {\n  expect(location.hash).to.be.empty;\n  expect(location.href).to.eq('https://example.cypress.io/commands/location');\n  expect(location.host).to.eq('example.cypress.io');\n  expect(location.hostname).to.eq('example.cypress.io');\n  expect(location.origin).to.eq('https://example.cypress.io');\n  expect(location.pathname).to.eq('/commands/location');\n  expect(location.port).to.eq('');\n  expect(location.protocol).to.eq('https:');\n  expect(location.search).to.be.empty;\n});",
              "err": {},
              "uuid": "6b9f4e36-c21e-411c-885d-8e603665ebf8",
              "parentUUID": "8b5f25c7-555d-4ac4-a49c-0968f41b518a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.url() - get the current URL",
              "fullTitle": "Location cy.url() - get the current URL",
              "timedOut": null,
              "duration": 566,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/location.cy.js.mp4\"\n    }\n]",
              "code": "// https://on.cypress.io/url\ncy.url().should('eq', 'https://example.cypress.io/commands/location');",
              "err": {},
              "uuid": "a374d6ec-8538-4b51-85c5-01774ef8e80b",
              "parentUUID": "8b5f25c7-555d-4ac4-a49c-0968f41b518a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5d7e3331-09e1-459b-aabd-d59a4ad23ea3",
            "6b9f4e36-c21e-411c-885d-8e603665ebf8",
            "a374d6ec-8538-4b51-85c5-01774ef8e80b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 10728,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "62892c06-b9c2-4dc3-b2fd-31238b12f0a6",
      "title": "",
      "fullFile": "cypress/e2e/2-advanced-examples/misc.cy.js",
      "file": "cypress/e2e/2-advanced-examples/misc.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "65a7836f-cd27-4739-9a5a-cc1d8d4a6bfe",
          "title": "Misc",
          "fullFile": "cypress/e2e/2-advanced-examples/misc.cy.js",
          "file": "cypress/e2e/2-advanced-examples/misc.cy.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": ".end() - end the command chain",
              "fullTitle": "Misc .end() - end the command chain",
              "timedOut": null,
              "duration": 9823,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/misc.cy.js.mp4\"\n    }\n]",
              "code": "// https://on.cypress.io/end\n// cy.end is useful when you want to end a chain of commands\n// and force Cypress to re-query from the root element\ncy.get('.misc-table').within(() => {\n  // ends the current chain and yields null\n  cy.contains('Cheryl').click().end();\n  // queries the entire table again\n  cy.contains('Charles').click();\n});",
              "err": {},
              "uuid": "eebeacfa-db22-4cec-9f35-806ee65e459a",
              "parentUUID": "65a7836f-cd27-4739-9a5a-cc1d8d4a6bfe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.exec() - execute a system command",
              "fullTitle": "Misc cy.exec() - execute a system command",
              "timedOut": null,
              "duration": 3453,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/misc.cy.js.mp4\"\n    }\n]",
              "code": "// execute a system command.\n// so you can take actions necessary for\n// your test outside the scope of Cypress.\n// https://on.cypress.io/exec\n// we can use Cypress.platform string to\n// select appropriate command\n// https://on.cypress/io/platform\ncy.log(`Platform ${Cypress.platform} architecture ${Cypress.arch}`);\n// on CircleCI Windows build machines we have a failure to run bash shell\n// https://github.com/cypress-io/cypress/issues/5169\n// so skip some of the tests by passing flag \"--env circle=true\"\nconst isCircleOnWindows = Cypress.platform === 'win32' && Cypress.env('circle');\nif (isCircleOnWindows) {\n  cy.log('Skipping test on CircleCI');\n  return;\n}\n// cy.exec problem on Shippable CI\n// https://github.com/cypress-io/cypress/issues/6718\nconst isShippable = Cypress.platform === 'linux' && Cypress.env('shippable');\nif (isShippable) {\n  cy.log('Skipping test on ShippableCI');\n  return;\n}\ncy.exec('echo Jane Lane').its('stdout').should('contain', 'Jane Lane');\nif (Cypress.platform === 'win32') {\n  cy.exec(`print ${Cypress.config('configFile')}`).its('stderr').should('be.empty');\n} else {\n  cy.exec(`cat ${Cypress.config('configFile')}`).its('stderr').should('be.empty');\n  cy.exec('pwd').its('code').should('eq', 0);\n}",
              "err": {},
              "uuid": "a5cd819c-64ca-456c-af03-0b3a387cb3a7",
              "parentUUID": "65a7836f-cd27-4739-9a5a-cc1d8d4a6bfe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.focused() - get the DOM element that has focus",
              "fullTitle": "Misc cy.focused() - get the DOM element that has focus",
              "timedOut": null,
              "duration": 1310,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/misc.cy.js.mp4\"\n    }\n]",
              "code": "// https://on.cypress.io/focused\ncy.get('.misc-form').find('#name').click();\ncy.focused().should('have.id', 'name');\ncy.get('.misc-form').find('#description').click();\ncy.focused().should('have.id', 'description');",
              "err": {},
              "uuid": "f715a38f-a6a9-4c18-8948-e3828e84c2e5",
              "parentUUID": "65a7836f-cd27-4739-9a5a-cc1d8d4a6bfe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.wrap() - wrap an object",
              "fullTitle": "Misc cy.wrap() - wrap an object",
              "timedOut": null,
              "duration": 922,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/misc.cy.js.mp4\"\n    }\n]",
              "code": "// https://on.cypress.io/wrap\ncy.wrap({\n  foo: 'bar'\n}).should('have.property', 'foo').and('include', 'bar');",
              "err": {},
              "uuid": "f99cc613-dd4c-4e5e-92ba-8c0e903c85c9",
              "parentUUID": "65a7836f-cd27-4739-9a5a-cc1d8d4a6bfe",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "377ec4d0-3940-4dfd-b613-4540df39e46c",
              "title": "Cypress.Screenshot",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "cy.screenshot() - take a screenshot",
                  "fullTitle": "Misc Cypress.Screenshot cy.screenshot() - take a screenshot",
                  "timedOut": null,
                  "duration": 2815,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "[\n    {\n        \"title\": \"Screenshot (my-image)\",\n        \"value\": \"data:image/png;base64, \"\n    },\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/misc.cy.js.mp4\"\n    }\n]",
                  "code": "// https://on.cypress.io/screenshot\ncy.screenshot('my-image');",
                  "err": {},
                  "uuid": "141f72ed-8e25-4b0e-b20e-2d3e508c46d4",
                  "parentUUID": "377ec4d0-3940-4dfd-b613-4540df39e46c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Cypress.Screenshot.defaults() - change default config of screenshots",
                  "fullTitle": "Misc Cypress.Screenshot Cypress.Screenshot.defaults() - change default config of screenshots",
                  "timedOut": null,
                  "duration": 1204,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/misc.cy.js.mp4\"\n    }\n]",
                  "code": "Cypress.Screenshot.defaults({\n  blackout: ['.foo'],\n  capture: 'viewport',\n  clip: {\n    x: 0,\n    y: 0,\n    width: 200,\n    height: 200\n  },\n  scale: false,\n  disableTimersAndAnimations: true,\n  screenshotOnRunFailure: true,\n  onBeforeScreenshot() {},\n  onAfterScreenshot() {}\n});",
                  "err": {},
                  "uuid": "95f9f85e-fd7a-472b-9ef0-3a6237af2156",
                  "parentUUID": "377ec4d0-3940-4dfd-b613-4540df39e46c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "141f72ed-8e25-4b0e-b20e-2d3e508c46d4",
                "95f9f85e-fd7a-472b-9ef0-3a6237af2156"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4019,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "eebeacfa-db22-4cec-9f35-806ee65e459a",
            "a5cd819c-64ca-456c-af03-0b3a387cb3a7",
            "f715a38f-a6a9-4c18-8948-e3828e84c2e5",
            "f99cc613-dd4c-4e5e-92ba-8c0e903c85c9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 15508,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "a73306b5-f313-4dad-a4b0-eb4dd022003e",
      "title": "",
      "fullFile": "cypress/e2e/2-advanced-examples/navigation.cy.js",
      "file": "cypress/e2e/2-advanced-examples/navigation.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "fdaf96b8-68b5-4298-ac6c-9e3c1fb2b414",
          "title": "Navigation",
          "fullFile": "cypress/e2e/2-advanced-examples/navigation.cy.js",
          "file": "cypress/e2e/2-advanced-examples/navigation.cy.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "cy.go() - go back or forward in the browser's history",
              "fullTitle": "Navigation cy.go() - go back or forward in the browser's history",
              "timedOut": null,
              "duration": 8894,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/navigation.cy.js.mp4\"\n    }\n]",
              "code": "// https://on.cypress.io/go\ncy.location('pathname').should('include', 'navigation');\ncy.go('back');\ncy.location('pathname').should('not.include', 'navigation');\ncy.go('forward');\ncy.location('pathname').should('include', 'navigation');\n// clicking back\ncy.go(-1);\ncy.location('pathname').should('not.include', 'navigation');\n// clicking forward\ncy.go(1);\ncy.location('pathname').should('include', 'navigation');",
              "err": {},
              "uuid": "f00131cf-198c-4523-b3dd-676398c1dbef",
              "parentUUID": "fdaf96b8-68b5-4298-ac6c-9e3c1fb2b414",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.reload() - reload the page",
              "fullTitle": "Navigation cy.reload() - reload the page",
              "timedOut": null,
              "duration": 1704,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/navigation.cy.js.mp4\"\n    }\n]",
              "code": "// https://on.cypress.io/reload\ncy.reload();\n// reload the page without using the cache\ncy.reload(true);",
              "err": {},
              "uuid": "4e6f65bf-12da-455d-90eb-26f62b436aa9",
              "parentUUID": "fdaf96b8-68b5-4298-ac6c-9e3c1fb2b414",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.visit() - visit a remote url",
              "fullTitle": "Navigation cy.visit() - visit a remote url",
              "timedOut": null,
              "duration": 1764,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/navigation.cy.js.mp4\"\n    }\n]",
              "code": "// https://on.cypress.io/visit\n// Visit any sub-domain of your current domain\n// Pass options to the visit\ncy.visit('https://example.cypress.io/commands/navigation', {\n  timeout: 50000,\n  // increase total time for the visit to resolve\n  onBeforeLoad(contentWindow) {\n    // contentWindow is the remote page's window object\n    expect(typeof contentWindow === 'object').to.be.true;\n  },\n  onLoad(contentWindow) {\n    // contentWindow is the remote page's window object\n    expect(typeof contentWindow === 'object').to.be.true;\n  }\n});",
              "err": {},
              "uuid": "a8ff98d2-045b-496e-a204-198a6a7dc85c",
              "parentUUID": "fdaf96b8-68b5-4298-ac6c-9e3c1fb2b414",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f00131cf-198c-4523-b3dd-676398c1dbef",
            "4e6f65bf-12da-455d-90eb-26f62b436aa9",
            "a8ff98d2-045b-496e-a204-198a6a7dc85c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 12362,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "e59fb9ae-a0a9-46e7-8291-ebd1c67c8346",
      "title": "",
      "fullFile": "cypress/e2e/2-advanced-examples/network_requests.cy.js",
      "file": "cypress/e2e/2-advanced-examples/network_requests.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "7855d49f-b163-4534-9961-849fbbca2fed",
          "title": "Network Requests",
          "fullFile": "cypress/e2e/2-advanced-examples/network_requests.cy.js",
          "file": "cypress/e2e/2-advanced-examples/network_requests.cy.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "cy.request() - make an XHR request",
              "fullTitle": "Network Requests cy.request() - make an XHR request",
              "timedOut": null,
              "duration": 4631,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/network_requests.cy.js.mp4\"\n    }\n]",
              "code": "// https://on.cypress.io/request\ncy.request('https://jsonplaceholder.cypress.io/comments').should(response => {\n  expect(response.status).to.eq(200);\n  // the server sometimes gets an extra comment posted from another machine\n  // which gets returned as 1 extra object\n  expect(response.body).to.have.property('length').and.be.oneOf([500, 501]);\n  expect(response).to.have.property('headers');\n  expect(response).to.have.property('duration');\n});",
              "err": {},
              "uuid": "94e010d4-869e-42ee-8370-46b3d222909d",
              "parentUUID": "7855d49f-b163-4534-9961-849fbbca2fed",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.request() - verify response using BDD syntax",
              "fullTitle": "Network Requests cy.request() - verify response using BDD syntax",
              "timedOut": null,
              "duration": 1958,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/network_requests.cy.js.mp4\"\n    }\n]",
              "code": "cy.request('https://jsonplaceholder.cypress.io/comments').then(response => {\n  // https://on.cypress.io/assertions\n  expect(response).property('status').to.equal(200);\n  expect(response).property('body').to.have.property('length').and.be.oneOf([500, 501]);\n  expect(response).to.include.keys('headers', 'duration');\n});",
              "err": {},
              "uuid": "e39443d2-1694-4398-8422-96bb8025f9e4",
              "parentUUID": "7855d49f-b163-4534-9961-849fbbca2fed",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.request() with query parameters",
              "fullTitle": "Network Requests cy.request() with query parameters",
              "timedOut": null,
              "duration": 1383,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/network_requests.cy.js.mp4\"\n    }\n]",
              "code": "// will execute request\n// https://jsonplaceholder.cypress.io/comments?postId=1&id=3\ncy.request({\n  url: 'https://jsonplaceholder.cypress.io/comments',\n  qs: {\n    postId: 1,\n    id: 3\n  }\n}).its('body').should('be.an', 'array').and('have.length', 1).its('0') // yields first element of the array\n.should('contain', {\n  postId: 1,\n  id: 3\n});",
              "err": {},
              "uuid": "d53302a8-6d65-4a02-91b6-1058937f97d8",
              "parentUUID": "7855d49f-b163-4534-9961-849fbbca2fed",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.request() - pass result to the second request",
              "fullTitle": "Network Requests cy.request() - pass result to the second request",
              "timedOut": null,
              "duration": 2006,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/network_requests.cy.js.mp4\"\n    }\n]",
              "code": "// first, let's find out the userId of the first user we have\ncy.request('https://jsonplaceholder.cypress.io/users?_limit=1').its('body') // yields the response object\n.its('0') // yields the first element of the returned list\n// the above two commands its('body').its('0')\n// can be written as its('body.0')\n// if you do not care about TypeScript checks\n.then(user => {\n  expect(user).property('id').to.be.a('number');\n  // make a new post on behalf of the user\n  cy.request('POST', 'https://jsonplaceholder.cypress.io/posts', {\n    userId: user.id,\n    title: 'Cypress Test Runner',\n    body: 'Fast, easy and reliable testing for anything that runs in a browser.'\n  });\n})\n// note that the value here is the returned value of the 2nd request\n// which is the new post object\n.then(response => {\n  expect(response).property('status').to.equal(201); // new entity created\n  expect(response).property('body').to.contain({\n    title: 'Cypress Test Runner'\n  });\n  // we don't know the exact post id - only that it will be > 100\n  // since JSONPlaceholder has built-in 100 posts\n  expect(response.body).property('id').to.be.a('number').and.to.be.gt(100);\n  // we don't know the user id here - since it was in above closure\n  // so in this test just confirm that the property is there\n  expect(response.body).property('userId').to.be.a('number');\n});",
              "err": {},
              "uuid": "107cec61-a18a-4003-881b-c417fe664936",
              "parentUUID": "7855d49f-b163-4534-9961-849fbbca2fed",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.request() - save response in the shared test context",
              "fullTitle": "Network Requests cy.request() - save response in the shared test context",
              "timedOut": null,
              "duration": 2556,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/network_requests.cy.js.mp4\"\n    }\n]",
              "code": "// https://on.cypress.io/variables-and-aliases\ncy.request('https://jsonplaceholder.cypress.io/users?_limit=1').its('body').its('0') // yields the first element of the returned list\n.as('user') // saves the object in the test context\n.then(function () {\n  // NOTE 👀\n  //  By the time this callback runs the \"as('user')\" command\n  //  has saved the user object in the test context.\n  //  To access the test context we need to use\n  //  the \"function () { ... }\" callback form,\n  //  otherwise \"this\" points at a wrong or undefined object!\n  cy.request('POST', 'https://jsonplaceholder.cypress.io/posts', {\n    userId: this.user.id,\n    title: 'Cypress Test Runner',\n    body: 'Fast, easy and reliable testing for anything that runs in a browser.'\n  }).its('body').as('post'); // save the new post from the response\n}).then(function () {\n  // When this callback runs, both \"cy.request\" API commands have finished\n  // and the test context has \"user\" and \"post\" objects set.\n  // Let's verify them.\n  expect(this.post, 'post has the right user id').property('userId').to.equal(this.user.id);\n});",
              "err": {},
              "uuid": "1be1df98-18a2-4deb-b762-77262a1f8df3",
              "parentUUID": "7855d49f-b163-4534-9961-849fbbca2fed",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.intercept() - route responses to matching requests",
              "fullTitle": "Network Requests cy.intercept() - route responses to matching requests",
              "timedOut": null,
              "duration": 2820,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/network_requests.cy.js.mp4\"\n    }\n]",
              "code": "// https://on.cypress.io/intercept\nlet message = 'whoa, this comment does not exist';\n// Listen to GET to comments/1\ncy.intercept('GET', '**/comments/*').as('getComment');\n// we have code that gets a comment when\n// the button is clicked in scripts.js\ncy.get('.network-btn').click();\n// https://on.cypress.io/wait\ncy.wait('@getComment').its('response.statusCode').should('be.oneOf', [200, 304]);\n// Listen to POST to comments\ncy.intercept('POST', '**/comments').as('postComment');\n// we have code that posts a comment when\n// the button is clicked in scripts.js\ncy.get('.network-post').click();\ncy.wait('@postComment').should(({\n  request,\n  response\n}) => {\n  expect(request.body).to.include('email');\n  expect(request.headers).to.have.property('content-type');\n  expect(response && response.body).to.have.property('name', 'Using POST in cy.intercept()');\n});\n// Stub a response to PUT comments/ ****\ncy.intercept({\n  method: 'PUT',\n  url: '**/comments/*'\n}, {\n  statusCode: 404,\n  body: {\n    error: message\n  },\n  headers: {\n    'access-control-allow-origin': '*'\n  },\n  delayMs: 500\n}).as('putComment');\n// we have code that puts a comment when\n// the button is clicked in scripts.js\ncy.get('.network-put').click();\ncy.wait('@putComment');\n// our 404 statusCode logic in scripts.js executed\ncy.get('.network-put-comment').should('contain', message);",
              "err": {},
              "uuid": "e527b455-a2f6-4b52-bfa9-25a7552597dd",
              "parentUUID": "7855d49f-b163-4534-9961-849fbbca2fed",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "94e010d4-869e-42ee-8370-46b3d222909d",
            "e39443d2-1694-4398-8422-96bb8025f9e4",
            "d53302a8-6d65-4a02-91b6-1058937f97d8",
            "107cec61-a18a-4003-881b-c417fe664936",
            "1be1df98-18a2-4deb-b762-77262a1f8df3",
            "e527b455-a2f6-4b52-bfa9-25a7552597dd"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 15354,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "7b9ddc35-aab8-4a69-9ce6-07b7107b5f03",
      "title": "",
      "fullFile": "cypress/e2e/2-advanced-examples/querying.cy.js",
      "file": "cypress/e2e/2-advanced-examples/querying.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "25718539-1763-4b28-93eb-54bd377d2eee",
          "title": "Querying",
          "fullFile": "cypress/e2e/2-advanced-examples/querying.cy.js",
          "file": "cypress/e2e/2-advanced-examples/querying.cy.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "cy.get() - query DOM elements",
              "fullTitle": "Querying cy.get() - query DOM elements",
              "timedOut": null,
              "duration": 2667,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/querying.cy.js.mp4\"\n    }\n]",
              "code": "// https://on.cypress.io/get\ncy.get('#query-btn').should('contain', 'Button');\ncy.get('.query-btn').should('contain', 'Button');\ncy.get('#querying .well>button:first').should('contain', 'Button');\n//              ↲\n// Use CSS selectors just like jQuery\ncy.get('[data-test-id=\"test-example\"]').should('have.class', 'example');\n// 'cy.get()' yields jQuery object, you can get its attribute\n// by invoking `.attr()` method\ncy.get('[data-test-id=\"test-example\"]').invoke('attr', 'data-test-id').should('equal', 'test-example');\n// or you can get element's CSS property\ncy.get('[data-test-id=\"test-example\"]').invoke('css', 'position').should('equal', 'static');\n// or use assertions directly during 'cy.get()'\n// https://on.cypress.io/assertions\ncy.get('[data-test-id=\"test-example\"]').should('have.attr', 'data-test-id', 'test-example').and('have.css', 'position', 'static');",
              "err": {},
              "uuid": "9ef23ef7-f97b-40bf-8fb3-0a6752c5c4ce",
              "parentUUID": "25718539-1763-4b28-93eb-54bd377d2eee",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.contains() - query DOM elements with matching content",
              "fullTitle": "Querying cy.contains() - query DOM elements with matching content",
              "timedOut": null,
              "duration": 494,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/querying.cy.js.mp4\"\n    }\n]",
              "code": "// https://on.cypress.io/contains\ncy.get('.query-list').contains('bananas').should('have.class', 'third');\n// we can pass a regexp to `.contains()`\ncy.get('.query-list').contains(/^b\\w+/).should('have.class', 'third');\ncy.get('.query-list').contains('apples').should('have.class', 'first');\n// passing a selector to contains will\n// yield the selector containing the text\ncy.get('#querying').contains('ul', 'oranges').should('have.class', 'query-list');\ncy.get('.query-button').contains('Save Form').should('have.class', 'btn');",
              "err": {},
              "uuid": "17526610-513f-4124-bab8-80fed91cd5ae",
              "parentUUID": "25718539-1763-4b28-93eb-54bd377d2eee",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".within() - query DOM elements within a specific element",
              "fullTitle": "Querying .within() - query DOM elements within a specific element",
              "timedOut": null,
              "duration": 447,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/querying.cy.js.mp4\"\n    }\n]",
              "code": "// https://on.cypress.io/within\ncy.get('.query-form').within(() => {\n  cy.get('input:first').should('have.attr', 'placeholder', 'Email');\n  cy.get('input:last').should('have.attr', 'placeholder', 'Password');\n});",
              "err": {},
              "uuid": "9a69defd-3d90-4a96-aee3-82ff12fd9ab5",
              "parentUUID": "25718539-1763-4b28-93eb-54bd377d2eee",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.root() - query the root DOM element",
              "fullTitle": "Querying cy.root() - query the root DOM element",
              "timedOut": null,
              "duration": 377,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/querying.cy.js.mp4\"\n    }\n]",
              "code": "// https://on.cypress.io/root\n// By default, root is the document\ncy.root().should('match', 'html');\ncy.get('.query-ul').within(() => {\n  // In this within, the root is now the ul DOM element\n  cy.root().should('have.class', 'query-ul');\n});",
              "err": {},
              "uuid": "aa3db5ec-63ad-46c4-be27-a86dd8be6c23",
              "parentUUID": "25718539-1763-4b28-93eb-54bd377d2eee",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "best practices - selecting elements",
              "fullTitle": "Querying best practices - selecting elements",
              "timedOut": null,
              "duration": 1215,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/querying.cy.js.mp4\"\n    }\n]",
              "code": "// https://on.cypress.io/best-practices#Selecting-Elements\ncy.get('[data-cy=best-practices-selecting-elements]').within(() => {\n  // Worst - too generic, no context\n  cy.get('button').click();\n  // Bad. Coupled to styling. Highly subject to change.\n  cy.get('.btn.btn-large').click();\n  // Average. Coupled to the `name` attribute which has HTML semantics.\n  cy.get('[name=submission]').click();\n  // Better. But still coupled to styling or JS event listeners.\n  cy.get('#main').click();\n  // Slightly better. Uses an ID but also ensures the element\n  // has an ARIA role attribute\n  cy.get('#main[role=button]').click();\n  // Much better. But still coupled to text content that may change.\n  cy.contains('Submit').click();\n  // Best. Insulated from all changes.\n  cy.get('[data-cy=submit]').click();\n});",
              "err": {},
              "uuid": "88c4de0c-776a-447b-8563-7aa0963ba860",
              "parentUUID": "25718539-1763-4b28-93eb-54bd377d2eee",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9ef23ef7-f97b-40bf-8fb3-0a6752c5c4ce",
            "17526610-513f-4124-bab8-80fed91cd5ae",
            "9a69defd-3d90-4a96-aee3-82ff12fd9ab5",
            "aa3db5ec-63ad-46c4-be27-a86dd8be6c23",
            "88c4de0c-776a-447b-8563-7aa0963ba860"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5200,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "bdc1bda7-dfb1-4b68-82d4-e668fbcba538",
      "title": "",
      "fullFile": "cypress/e2e/2-advanced-examples/spies_stubs_clocks.cy.js",
      "file": "cypress/e2e/2-advanced-examples/spies_stubs_clocks.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "5f03ab57-9dd5-46ef-a723-b658af089a5d",
          "title": "Spies, Stubs, and Clock",
          "fullFile": "cypress/e2e/2-advanced-examples/spies_stubs_clocks.cy.js",
          "file": "cypress/e2e/2-advanced-examples/spies_stubs_clocks.cy.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "cy.spy() - wrap a method in a spy",
              "fullTitle": "Spies, Stubs, and Clock cy.spy() - wrap a method in a spy",
              "timedOut": null,
              "duration": 1565,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/spies_stubs_clocks.cy.js.mp4\"\n    }\n]",
              "code": "// https://on.cypress.io/spy\ncy.visit('https://example.cypress.io/commands/spies-stubs-clocks');\nconst obj = {\n  foo() {}\n};\nconst spy = cy.spy(obj, 'foo').as('anyArgs');\nobj.foo();\nexpect(spy).to.be.called;",
              "err": {},
              "uuid": "6e2fbbeb-1960-4e6f-b094-426d7d32793d",
              "parentUUID": "5f03ab57-9dd5-46ef-a723-b658af089a5d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.spy() retries until assertions pass",
              "fullTitle": "Spies, Stubs, and Clock cy.spy() retries until assertions pass",
              "timedOut": null,
              "duration": 2587,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/spies_stubs_clocks.cy.js.mp4\"\n    }\n]",
              "code": "cy.visit('https://example.cypress.io/commands/spies-stubs-clocks');\nconst obj = {\n  /**\n   * Prints the argument passed\n   * @param x {any}\n  */\n  foo(x) {\n    console.log('obj.foo called with', x);\n  }\n};\ncy.spy(obj, 'foo').as('foo');\nsetTimeout(() => {\n  obj.foo('first');\n}, 500);\nsetTimeout(() => {\n  obj.foo('second');\n}, 2500);\ncy.get('@foo').should('have.been.calledTwice');",
              "err": {},
              "uuid": "a7586bec-c1ee-48ff-98d7-78f62661e554",
              "parentUUID": "5f03ab57-9dd5-46ef-a723-b658af089a5d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.stub() - create a stub and/or replace a function with stub",
              "fullTitle": "Spies, Stubs, and Clock cy.stub() - create a stub and/or replace a function with stub",
              "timedOut": null,
              "duration": 388,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/spies_stubs_clocks.cy.js.mp4\"\n    }\n]",
              "code": "// https://on.cypress.io/stub\ncy.visit('https://example.cypress.io/commands/spies-stubs-clocks');\nconst obj = {\n  /**\n   * prints both arguments to the console\n   * @param a {string}\n   * @param b {string}\n  */\n  foo(a, b) {\n    console.log('a', a, 'b', b);\n  }\n};\nconst stub = cy.stub(obj, 'foo').as('foo');\nobj.foo('foo', 'bar');\nexpect(stub).to.be.called;",
              "err": {},
              "uuid": "77aa9d70-072c-4cf5-b555-e9f7e5308efe",
              "parentUUID": "5f03ab57-9dd5-46ef-a723-b658af089a5d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.clock() - control time in the browser",
              "fullTitle": "Spies, Stubs, and Clock cy.clock() - control time in the browser",
              "timedOut": null,
              "duration": 526,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/spies_stubs_clocks.cy.js.mp4\"\n    }\n]",
              "code": "// https://on.cypress.io/clock\n// create the date in UTC so its always the same\n// no matter what local timezone the browser is running in\nconst now = new Date(Date.UTC(2017, 2, 14)).getTime();\ncy.clock(now);\ncy.visit('https://example.cypress.io/commands/spies-stubs-clocks');\ncy.get('#clock-div').click().should('have.text', '1489449600');",
              "err": {},
              "uuid": "af0aadbb-086a-474c-b6a0-dc9a82ae2e01",
              "parentUUID": "5f03ab57-9dd5-46ef-a723-b658af089a5d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.tick() - move time in the browser",
              "fullTitle": "Spies, Stubs, and Clock cy.tick() - move time in the browser",
              "timedOut": null,
              "duration": 1206,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/spies_stubs_clocks.cy.js.mp4\"\n    }\n]",
              "code": "// https://on.cypress.io/tick\n// create the date in UTC so its always the same\n// no matter what local timezone the browser is running in\nconst now = new Date(Date.UTC(2017, 2, 14)).getTime();\ncy.clock(now);\ncy.visit('https://example.cypress.io/commands/spies-stubs-clocks');\ncy.get('#tick-div').click().should('have.text', '1489449600');\ncy.tick(10000); // 10 seconds passed\ncy.get('#tick-div').click().should('have.text', '1489449610');",
              "err": {},
              "uuid": "86334d6a-b190-4017-b12d-5db76944fc3a",
              "parentUUID": "5f03ab57-9dd5-46ef-a723-b658af089a5d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.stub() matches depending on arguments",
              "fullTitle": "Spies, Stubs, and Clock cy.stub() matches depending on arguments",
              "timedOut": null,
              "duration": 87,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/spies_stubs_clocks.cy.js.mp4\"\n    }\n]",
              "code": "// see all possible matchers at\n// https://sinonjs.org/releases/latest/matchers/\nconst greeter = {\n  /**\n   * Greets a person\n   * @param {string} name\n  */\n  greet(name) {\n    return `Hello, ${name}!`;\n  }\n};\ncy.stub(greeter, 'greet').callThrough() // if you want non-matched calls to call the real method\n.withArgs(Cypress.sinon.match.string).returns('Hi').withArgs(Cypress.sinon.match.number).throws(new Error('Invalid name'));\nexpect(greeter.greet('World')).to.equal('Hi');\nexpect(() => greeter.greet(42)).to.throw('Invalid name');\nexpect(greeter.greet).to.have.been.calledTwice;\n// non-matched calls goes the actual method\nexpect(greeter.greet()).to.equal('Hello, undefined!');",
              "err": {},
              "uuid": "8f6147ae-62dd-4c6f-969f-371386333336",
              "parentUUID": "5f03ab57-9dd5-46ef-a723-b658af089a5d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "matches call arguments using Sinon matchers",
              "fullTitle": "Spies, Stubs, and Clock matches call arguments using Sinon matchers",
              "timedOut": null,
              "duration": 112,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/spies_stubs_clocks.cy.js.mp4\"\n    }\n]",
              "code": "// see all possible matchers at\n// https://sinonjs.org/releases/latest/matchers/\nconst calculator = {\n  /**\n   * returns the sum of two arguments\n   * @param a {number}\n   * @param b {number}\n  */\n  add(a, b) {\n    return a + b;\n  }\n};\nconst spy = cy.spy(calculator, 'add').as('add');\nexpect(calculator.add(2, 3)).to.equal(5);\n// if we want to assert the exact values used during the call\nexpect(spy).to.be.calledWith(2, 3);\n// let's confirm \"add\" method was called with two numbers\nexpect(spy).to.be.calledWith(Cypress.sinon.match.number, Cypress.sinon.match.number);\n// alternatively, provide the value to match\nexpect(spy).to.be.calledWith(Cypress.sinon.match(2), Cypress.sinon.match(3));\n// match any value\nexpect(spy).to.be.calledWith(Cypress.sinon.match.any, 3);\n// match any value from a list\nexpect(spy).to.be.calledWith(Cypress.sinon.match.in([1, 2, 3]), 3);\n/**\n * Returns true if the given number is even\n * @param {number} x\n */\nconst isEven = x => x % 2 === 0;\n// expect the value to pass a custom predicate function\n// the second argument to \"sinon.match(predicate, message)\" is\n// shown if the predicate does not pass and assertion fails\nexpect(spy).to.be.calledWith(Cypress.sinon.match(isEven, 'isEven'), 3);\n/**\n * Returns a function that checks if a given number is larger than the limit\n * @param {number} limit\n * @returns {(x: number) => boolean}\n */\nconst isGreaterThan = limit => x => x > limit;\n/**\n * Returns a function that checks if a given number is less than the limit\n * @param {number} limit\n * @returns {(x: number) => boolean}\n */\nconst isLessThan = limit => x => x < limit;\n// you can combine several matchers using \"and\", \"or\"\nexpect(spy).to.be.calledWith(Cypress.sinon.match.number, Cypress.sinon.match(isGreaterThan(2), '> 2').and(Cypress.sinon.match(isLessThan(4), '< 4')));\nexpect(spy).to.be.calledWith(Cypress.sinon.match.number, Cypress.sinon.match(isGreaterThan(200), '> 200').or(Cypress.sinon.match(3)));\n// matchers can be used from BDD assertions\ncy.get('@add').should('have.been.calledWith', Cypress.sinon.match.number, Cypress.sinon.match(3));\n// you can alias matchers for shorter test code\nconst {\n  match: M\n} = Cypress.sinon;\ncy.get('@add').should('have.been.calledWith', M.number, M(3));",
              "err": {},
              "uuid": "3dc2f51e-5151-4ac2-b8f0-43af99f6a32d",
              "parentUUID": "5f03ab57-9dd5-46ef-a723-b658af089a5d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6e2fbbeb-1960-4e6f-b094-426d7d32793d",
            "a7586bec-c1ee-48ff-98d7-78f62661e554",
            "77aa9d70-072c-4cf5-b555-e9f7e5308efe",
            "af0aadbb-086a-474c-b6a0-dc9a82ae2e01",
            "86334d6a-b190-4017-b12d-5db76944fc3a",
            "8f6147ae-62dd-4c6f-969f-371386333336",
            "3dc2f51e-5151-4ac2-b8f0-43af99f6a32d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 6471,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "9369eafa-f2c3-4fbc-9b2c-65de481698f1",
      "title": "",
      "fullFile": "cypress/e2e/2-advanced-examples/storage.cy.js",
      "file": "cypress/e2e/2-advanced-examples/storage.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "e8b33165-a271-49c2-8582-7dd347da7b8f",
          "title": "Local Storage / Session Storage",
          "fullFile": "cypress/e2e/2-advanced-examples/storage.cy.js",
          "file": "cypress/e2e/2-advanced-examples/storage.cy.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "cy.clearLocalStorage() - clear all data in localStorage for the current origin",
              "fullTitle": "Local Storage / Session Storage cy.clearLocalStorage() - clear all data in localStorage for the current origin",
              "timedOut": null,
              "duration": 8989,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/storage.cy.js.mp4\"\n    }\n]",
              "code": "// https://on.cypress.io/clearlocalstorage\ncy.get('.ls-btn').click().should(() => {\n  expect(localStorage.getItem('prop1')).to.eq('red');\n  expect(localStorage.getItem('prop2')).to.eq('blue');\n  expect(localStorage.getItem('prop3')).to.eq('magenta');\n});\n// clearLocalStorage() yields the localStorage object\ncy.clearLocalStorage().should(ls => {\n  expect(ls.getItem('prop1')).to.be.null;\n  expect(ls.getItem('prop2')).to.be.null;\n  expect(ls.getItem('prop3')).to.be.null;\n});\ncy.get('.ls-btn').click().should(() => {\n  expect(localStorage.getItem('prop1')).to.eq('red');\n  expect(localStorage.getItem('prop2')).to.eq('blue');\n  expect(localStorage.getItem('prop3')).to.eq('magenta');\n});\n// Clear key matching string in localStorage\ncy.clearLocalStorage('prop1').should(ls => {\n  expect(ls.getItem('prop1')).to.be.null;\n  expect(ls.getItem('prop2')).to.eq('blue');\n  expect(ls.getItem('prop3')).to.eq('magenta');\n});\ncy.get('.ls-btn').click().should(() => {\n  expect(localStorage.getItem('prop1')).to.eq('red');\n  expect(localStorage.getItem('prop2')).to.eq('blue');\n  expect(localStorage.getItem('prop3')).to.eq('magenta');\n});\n// Clear keys matching regex in localStorage\ncy.clearLocalStorage(/prop1|2/).should(ls => {\n  expect(ls.getItem('prop1')).to.be.null;\n  expect(ls.getItem('prop2')).to.be.null;\n  expect(ls.getItem('prop3')).to.eq('magenta');\n});",
              "err": {},
              "uuid": "4fb7e3d5-a0a9-44e2-972e-3a2a665a1cb4",
              "parentUUID": "e8b33165-a271-49c2-8582-7dd347da7b8f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.getAllLocalStorage() - get all data in localStorage for all origins",
              "fullTitle": "Local Storage / Session Storage cy.getAllLocalStorage() - get all data in localStorage for all origins",
              "timedOut": null,
              "duration": 907,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/storage.cy.js.mp4\"\n    }\n]",
              "code": "// https://on.cypress.io/getalllocalstorage\ncy.get('.ls-btn').click();\n// getAllLocalStorage() yields a map of origins to localStorage values\ncy.getAllLocalStorage().should(storageMap => {\n  expect(storageMap).to.deep.equal({\n    // other origins will also be present if localStorage is set on them\n    'https://example.cypress.io': {\n      'prop1': 'red',\n      'prop2': 'blue',\n      'prop3': 'magenta'\n    }\n  });\n});",
              "err": {},
              "uuid": "b32e97bc-982c-437b-bb17-42f0073cf76b",
              "parentUUID": "e8b33165-a271-49c2-8582-7dd347da7b8f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.clearAllLocalStorage() - clear all data in localStorage for all origins",
              "fullTitle": "Local Storage / Session Storage cy.clearAllLocalStorage() - clear all data in localStorage for all origins",
              "timedOut": null,
              "duration": 818,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/storage.cy.js.mp4\"\n    }\n]",
              "code": "// https://on.cypress.io/clearalllocalstorage\ncy.get('.ls-btn').click();\n// clearAllLocalStorage() yields null\ncy.clearAllLocalStorage().should(() => {\n  expect(sessionStorage.getItem('prop1')).to.be.null;\n  expect(sessionStorage.getItem('prop2')).to.be.null;\n  expect(sessionStorage.getItem('prop3')).to.be.null;\n});",
              "err": {},
              "uuid": "d1111ff0-5ec3-45c9-9d60-ebe2f50eccf5",
              "parentUUID": "e8b33165-a271-49c2-8582-7dd347da7b8f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.getAllSessionStorage() - get all data in sessionStorage for all origins",
              "fullTitle": "Local Storage / Session Storage cy.getAllSessionStorage() - get all data in sessionStorage for all origins",
              "timedOut": null,
              "duration": 761,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/storage.cy.js.mp4\"\n    }\n]",
              "code": "// https://on.cypress.io/getallsessionstorage\ncy.get('.ls-btn').click();\n// getAllSessionStorage() yields a map of origins to sessionStorage values\ncy.getAllSessionStorage().should(storageMap => {\n  expect(storageMap).to.deep.equal({\n    // other origins will also be present if sessionStorage is set on them\n    'https://example.cypress.io': {\n      'prop4': 'cyan',\n      'prop5': 'yellow',\n      'prop6': 'black'\n    }\n  });\n});",
              "err": {},
              "uuid": "0fb9b231-dbc8-4548-9dd0-20c572b66bc4",
              "parentUUID": "e8b33165-a271-49c2-8582-7dd347da7b8f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.clearAllSessionStorage() - clear all data in sessionStorage for all origins",
              "fullTitle": "Local Storage / Session Storage cy.clearAllSessionStorage() - clear all data in sessionStorage for all origins",
              "timedOut": null,
              "duration": 717,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/storage.cy.js.mp4\"\n    }\n]",
              "code": "// https://on.cypress.io/clearallsessionstorage\ncy.get('.ls-btn').click();\n// clearAllSessionStorage() yields null\ncy.clearAllSessionStorage().should(() => {\n  expect(sessionStorage.getItem('prop4')).to.be.null;\n  expect(sessionStorage.getItem('prop5')).to.be.null;\n  expect(sessionStorage.getItem('prop6')).to.be.null;\n});",
              "err": {},
              "uuid": "b173f0c3-4939-4c38-a5e0-91f1c25a6803",
              "parentUUID": "e8b33165-a271-49c2-8582-7dd347da7b8f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4fb7e3d5-a0a9-44e2-972e-3a2a665a1cb4",
            "b32e97bc-982c-437b-bb17-42f0073cf76b",
            "d1111ff0-5ec3-45c9-9d60-ebe2f50eccf5",
            "0fb9b231-dbc8-4548-9dd0-20c572b66bc4",
            "b173f0c3-4939-4c38-a5e0-91f1c25a6803"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 12192,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "3f9abed9-6a53-46b4-9ecb-e39b811b96dd",
      "title": "",
      "fullFile": "cypress/e2e/2-advanced-examples/traversal.cy.js",
      "file": "cypress/e2e/2-advanced-examples/traversal.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "4cdeac20-daa4-47d4-bf3f-a83159636797",
          "title": "Traversal",
          "fullFile": "cypress/e2e/2-advanced-examples/traversal.cy.js",
          "file": "cypress/e2e/2-advanced-examples/traversal.cy.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": ".children() - get child DOM elements",
              "fullTitle": "Traversal .children() - get child DOM elements",
              "timedOut": null,
              "duration": 6188,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/traversal.cy.js.mp4\"\n    }\n]",
              "code": "// https://on.cypress.io/children\ncy.get('.traversal-breadcrumb').children('.active').should('contain', 'Data');",
              "err": {},
              "uuid": "8b4b45db-40e5-42f9-93f8-4544809eac0c",
              "parentUUID": "4cdeac20-daa4-47d4-bf3f-a83159636797",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".closest() - get closest ancestor DOM element",
              "fullTitle": "Traversal .closest() - get closest ancestor DOM element",
              "timedOut": null,
              "duration": 608,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/traversal.cy.js.mp4\"\n    }\n]",
              "code": "// https://on.cypress.io/closest\ncy.get('.traversal-badge').closest('ul').should('have.class', 'list-group');",
              "err": {},
              "uuid": "4f963c74-3423-43a4-8479-d941caa04289",
              "parentUUID": "4cdeac20-daa4-47d4-bf3f-a83159636797",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".eq() - get a DOM element at a specific index",
              "fullTitle": "Traversal .eq() - get a DOM element at a specific index",
              "timedOut": null,
              "duration": 540,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/traversal.cy.js.mp4\"\n    }\n]",
              "code": "// https://on.cypress.io/eq\ncy.get('.traversal-list>li').eq(1).should('contain', 'siamese');",
              "err": {},
              "uuid": "20942285-cebf-434f-8c65-c49d30e6c0b7",
              "parentUUID": "4cdeac20-daa4-47d4-bf3f-a83159636797",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".filter() - get DOM elements that match the selector",
              "fullTitle": "Traversal .filter() - get DOM elements that match the selector",
              "timedOut": null,
              "duration": 504,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/traversal.cy.js.mp4\"\n    }\n]",
              "code": "// https://on.cypress.io/filter\ncy.get('.traversal-nav>li').filter('.active').should('contain', 'About');",
              "err": {},
              "uuid": "f7163c99-9c3a-4345-809a-5cda9f18e61e",
              "parentUUID": "4cdeac20-daa4-47d4-bf3f-a83159636797",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".find() - get descendant DOM elements of the selector",
              "fullTitle": "Traversal .find() - get descendant DOM elements of the selector",
              "timedOut": null,
              "duration": 684,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/traversal.cy.js.mp4\"\n    }\n]",
              "code": "// https://on.cypress.io/find\ncy.get('.traversal-pagination').find('li').find('a').should('have.length', 7);",
              "err": {},
              "uuid": "168ccd33-8ffd-40c7-a83f-48eafa866ffc",
              "parentUUID": "4cdeac20-daa4-47d4-bf3f-a83159636797",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".first() - get first DOM element",
              "fullTitle": "Traversal .first() - get first DOM element",
              "timedOut": null,
              "duration": 632,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/traversal.cy.js.mp4\"\n    }\n]",
              "code": "// https://on.cypress.io/first\ncy.get('.traversal-table td').first().should('contain', '1');",
              "err": {},
              "uuid": "351c7e9d-53be-483c-aec5-0f810ad274f8",
              "parentUUID": "4cdeac20-daa4-47d4-bf3f-a83159636797",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".last() - get last DOM element",
              "fullTitle": "Traversal .last() - get last DOM element",
              "timedOut": null,
              "duration": 533,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/traversal.cy.js.mp4\"\n    }\n]",
              "code": "// https://on.cypress.io/last\ncy.get('.traversal-buttons .btn').last().should('contain', 'Submit');",
              "err": {},
              "uuid": "cbecda1e-1812-459a-91bc-b01352bc5c1b",
              "parentUUID": "4cdeac20-daa4-47d4-bf3f-a83159636797",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".next() - get next sibling DOM element",
              "fullTitle": "Traversal .next() - get next sibling DOM element",
              "timedOut": null,
              "duration": 517,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/traversal.cy.js.mp4\"\n    }\n]",
              "code": "// https://on.cypress.io/next\ncy.get('.traversal-ul').contains('apples').next().should('contain', 'oranges');",
              "err": {},
              "uuid": "77890ced-f186-46ec-8114-3a0fe66ca925",
              "parentUUID": "4cdeac20-daa4-47d4-bf3f-a83159636797",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".nextAll() - get all next sibling DOM elements",
              "fullTitle": "Traversal .nextAll() - get all next sibling DOM elements",
              "timedOut": null,
              "duration": 551,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/traversal.cy.js.mp4\"\n    }\n]",
              "code": "// https://on.cypress.io/nextall\ncy.get('.traversal-next-all').contains('oranges').nextAll().should('have.length', 3);",
              "err": {},
              "uuid": "95d5cb76-8b10-4b5c-90a3-98862f198816",
              "parentUUID": "4cdeac20-daa4-47d4-bf3f-a83159636797",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".nextUntil() - get next sibling DOM elements until next el",
              "fullTitle": "Traversal .nextUntil() - get next sibling DOM elements until next el",
              "timedOut": null,
              "duration": 527,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/traversal.cy.js.mp4\"\n    }\n]",
              "code": "// https://on.cypress.io/nextuntil\ncy.get('#veggies').nextUntil('#nuts').should('have.length', 3);",
              "err": {},
              "uuid": "bfb73e0f-7b89-4381-a29c-760ed6290134",
              "parentUUID": "4cdeac20-daa4-47d4-bf3f-a83159636797",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".not() - remove DOM elements from set of DOM elements",
              "fullTitle": "Traversal .not() - remove DOM elements from set of DOM elements",
              "timedOut": null,
              "duration": 556,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/traversal.cy.js.mp4\"\n    }\n]",
              "code": "// https://on.cypress.io/not\ncy.get('.traversal-disabled .btn').not('[disabled]').should('not.contain', 'Disabled');",
              "err": {},
              "uuid": "28b8f236-58dc-4e77-86ae-7d40adbe9162",
              "parentUUID": "4cdeac20-daa4-47d4-bf3f-a83159636797",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".parent() - get parent DOM element from DOM elements",
              "fullTitle": "Traversal .parent() - get parent DOM element from DOM elements",
              "timedOut": null,
              "duration": 510,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/traversal.cy.js.mp4\"\n    }\n]",
              "code": "// https://on.cypress.io/parent\ncy.get('.traversal-mark').parent().should('contain', 'Morbi leo risus');",
              "err": {},
              "uuid": "6a432a20-6728-4be8-8db5-26b5d9cc55c4",
              "parentUUID": "4cdeac20-daa4-47d4-bf3f-a83159636797",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".parents() - get parent DOM elements from DOM elements",
              "fullTitle": "Traversal .parents() - get parent DOM elements from DOM elements",
              "timedOut": null,
              "duration": 655,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/traversal.cy.js.mp4\"\n    }\n]",
              "code": "// https://on.cypress.io/parents\ncy.get('.traversal-cite').parents().should('match', 'blockquote');",
              "err": {},
              "uuid": "86f828fc-b386-4dd8-be05-05e7ee3f894b",
              "parentUUID": "4cdeac20-daa4-47d4-bf3f-a83159636797",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".parentsUntil() - get parent DOM elements from DOM elements until el",
              "fullTitle": "Traversal .parentsUntil() - get parent DOM elements from DOM elements until el",
              "timedOut": null,
              "duration": 718,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/traversal.cy.js.mp4\"\n    }\n]",
              "code": "// https://on.cypress.io/parentsuntil\ncy.get('.clothes-nav').find('.active').parentsUntil('.clothes-nav').should('have.length', 2);",
              "err": {},
              "uuid": "966140ba-6328-4204-b144-3c37be3a0423",
              "parentUUID": "4cdeac20-daa4-47d4-bf3f-a83159636797",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".prev() - get previous sibling DOM element",
              "fullTitle": "Traversal .prev() - get previous sibling DOM element",
              "timedOut": null,
              "duration": 523,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/traversal.cy.js.mp4\"\n    }\n]",
              "code": "// https://on.cypress.io/prev\ncy.get('.birds').find('.active').prev().should('contain', 'Lorikeets');",
              "err": {},
              "uuid": "f5020a09-7a90-4c9e-8673-b56918c5754b",
              "parentUUID": "4cdeac20-daa4-47d4-bf3f-a83159636797",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".prevAll() - get all previous sibling DOM elements",
              "fullTitle": "Traversal .prevAll() - get all previous sibling DOM elements",
              "timedOut": null,
              "duration": 494,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/traversal.cy.js.mp4\"\n    }\n]",
              "code": "// https://on.cypress.io/prevall\ncy.get('.fruits-list').find('.third').prevAll().should('have.length', 2);",
              "err": {},
              "uuid": "d435cd6d-3478-46cc-b0b6-f66715247dd5",
              "parentUUID": "4cdeac20-daa4-47d4-bf3f-a83159636797",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".prevUntil() - get all previous sibling DOM elements until el",
              "fullTitle": "Traversal .prevUntil() - get all previous sibling DOM elements until el",
              "timedOut": null,
              "duration": 514,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/traversal.cy.js.mp4\"\n    }\n]",
              "code": "// https://on.cypress.io/prevuntil\ncy.get('.foods-list').find('#nuts').prevUntil('#veggies').should('have.length', 3);",
              "err": {},
              "uuid": "e86f538a-2887-42bc-bacd-a20679c484ea",
              "parentUUID": "4cdeac20-daa4-47d4-bf3f-a83159636797",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".siblings() - get all sibling DOM elements",
              "fullTitle": "Traversal .siblings() - get all sibling DOM elements",
              "timedOut": null,
              "duration": 470,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/traversal.cy.js.mp4\"\n    }\n]",
              "code": "// https://on.cypress.io/siblings\ncy.get('.traversal-pills .active').siblings().should('have.length', 2);",
              "err": {},
              "uuid": "b89e42d4-0179-413a-8ad1-d3dec656fe78",
              "parentUUID": "4cdeac20-daa4-47d4-bf3f-a83159636797",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8b4b45db-40e5-42f9-93f8-4544809eac0c",
            "4f963c74-3423-43a4-8479-d941caa04289",
            "20942285-cebf-434f-8c65-c49d30e6c0b7",
            "f7163c99-9c3a-4345-809a-5cda9f18e61e",
            "168ccd33-8ffd-40c7-a83f-48eafa866ffc",
            "351c7e9d-53be-483c-aec5-0f810ad274f8",
            "cbecda1e-1812-459a-91bc-b01352bc5c1b",
            "77890ced-f186-46ec-8114-3a0fe66ca925",
            "95d5cb76-8b10-4b5c-90a3-98862f198816",
            "bfb73e0f-7b89-4381-a29c-760ed6290134",
            "28b8f236-58dc-4e77-86ae-7d40adbe9162",
            "6a432a20-6728-4be8-8db5-26b5d9cc55c4",
            "86f828fc-b386-4dd8-be05-05e7ee3f894b",
            "966140ba-6328-4204-b144-3c37be3a0423",
            "f5020a09-7a90-4c9e-8673-b56918c5754b",
            "d435cd6d-3478-46cc-b0b6-f66715247dd5",
            "e86f538a-2887-42bc-bacd-a20679c484ea",
            "b89e42d4-0179-413a-8ad1-d3dec656fe78"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 15724,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "19dd148b-a900-4de6-84ec-2cd843f3cf79",
      "title": "",
      "fullFile": "cypress/e2e/2-advanced-examples/utilities.cy.js",
      "file": "cypress/e2e/2-advanced-examples/utilities.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "6f8e59fa-d799-4f21-a7c4-888aff634a7d",
          "title": "Utilities",
          "fullFile": "cypress/e2e/2-advanced-examples/utilities.cy.js",
          "file": "cypress/e2e/2-advanced-examples/utilities.cy.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Cypress._ - call a lodash method",
              "fullTitle": "Utilities Cypress._ - call a lodash method",
              "timedOut": null,
              "duration": 2278,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/utilities.cy.js.mp4\"\n    }\n]",
              "code": "// https://on.cypress.io/_\ncy.request('https://jsonplaceholder.cypress.io/users').then(response => {\n  let ids = Cypress._.chain(response.body).map('id').take(3).value();\n  expect(ids).to.deep.eq([1, 2, 3]);\n});",
              "err": {},
              "uuid": "a4761570-9108-41c3-852d-5d0ede458689",
              "parentUUID": "6f8e59fa-d799-4f21-a7c4-888aff634a7d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Cypress.$ - call a jQuery method",
              "fullTitle": "Utilities Cypress.$ - call a jQuery method",
              "timedOut": null,
              "duration": 501,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/utilities.cy.js.mp4\"\n    }\n]",
              "code": "// https://on.cypress.io/$\nlet $li = Cypress.$('.utility-jquery li:first');\ncy.wrap($li).should('not.have.class', 'active').click().should('have.class', 'active');",
              "err": {},
              "uuid": "0b4bb43e-46d9-4a5e-9976-bb2cf790e5a9",
              "parentUUID": "6f8e59fa-d799-4f21-a7c4-888aff634a7d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Cypress.Blob - blob utilities and base64 string conversion",
              "fullTitle": "Utilities Cypress.Blob - blob utilities and base64 string conversion",
              "timedOut": null,
              "duration": 845,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/utilities.cy.js.mp4\"\n    }\n]",
              "code": "// https://on.cypress.io/blob\ncy.get('.utility-blob').then($div => {\n  // https://github.com/nolanlawson/blob-util#imgSrcToDataURL\n  // get the dataUrl string for the javascript-logo\n  return Cypress.Blob.imgSrcToDataURL('https://example.cypress.io/assets/img/javascript-logo.png', undefined, 'anonymous').then(dataUrl => {\n    // create an <img> element and set its src to the dataUrl\n    let img = Cypress.$('<img />', {\n      src: dataUrl\n    });\n    // need to explicitly return cy here since we are initially returning\n    // the Cypress.Blob.imgSrcToDataURL promise to our test\n    // append the image\n    $div.append(img);\n    cy.get('.utility-blob img').click().should('have.attr', 'src', dataUrl);\n  });\n});",
              "err": {},
              "uuid": "a3aa410c-59c1-484e-a130-c76f96ae3e00",
              "parentUUID": "6f8e59fa-d799-4f21-a7c4-888aff634a7d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Cypress.minimatch - test out glob patterns against strings",
              "fullTitle": "Utilities Cypress.minimatch - test out glob patterns against strings",
              "timedOut": null,
              "duration": 351,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/utilities.cy.js.mp4\"\n    }\n]",
              "code": "// https://on.cypress.io/minimatch\nlet matching = Cypress.minimatch('/users/1/comments', '/users/*/comments', {\n  matchBase: true\n});\nexpect(matching, 'matching wildcard').to.be.true;\nmatching = Cypress.minimatch('/users/1/comments/2', '/users/*/comments', {\n  matchBase: true\n});\nexpect(matching, 'comments').to.be.false;\n// ** matches against all downstream path segments\nmatching = Cypress.minimatch('/foo/bar/baz/123/quux?a=b&c=2', '/foo/**', {\n  matchBase: true\n});\nexpect(matching, 'comments').to.be.true;\n// whereas * matches only the next path segment\nmatching = Cypress.minimatch('/foo/bar/baz/123/quux?a=b&c=2', '/foo/*', {\n  matchBase: false\n});\nexpect(matching, 'comments').to.be.false;",
              "err": {},
              "uuid": "dfad2a99-1ad0-4d9c-9195-15d8e99cf622",
              "parentUUID": "6f8e59fa-d799-4f21-a7c4-888aff634a7d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Cypress.Promise - instantiate a bluebird promise",
              "fullTitle": "Utilities Cypress.Promise - instantiate a bluebird promise",
              "timedOut": null,
              "duration": 1309,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/utilities.cy.js.mp4\"\n    }\n]",
              "code": "// https://on.cypress.io/promise\nlet waited = false;\n/**\n * @return Bluebird<string>\n */\nfunction waitOneSecond() {\n  // return a promise that resolves after 1 second\n  return new Cypress.Promise((resolve, reject) => {\n    setTimeout(() => {\n      // set waited to true\n      waited = true;\n      // resolve with 'foo' string\n      resolve('foo');\n    }, 1000);\n  });\n}\ncy.then(() => {\n  // return a promise to cy.then() that\n  // is awaited until it resolves\n  return waitOneSecond().then(str => {\n    expect(str).to.eq('foo');\n    expect(waited).to.be.true;\n  });\n});",
              "err": {},
              "uuid": "9fc05ed5-0876-47c6-8514-5ed3d28ded33",
              "parentUUID": "6f8e59fa-d799-4f21-a7c4-888aff634a7d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a4761570-9108-41c3-852d-5d0ede458689",
            "0b4bb43e-46d9-4a5e-9976-bb2cf790e5a9",
            "a3aa410c-59c1-484e-a130-c76f96ae3e00",
            "dfad2a99-1ad0-4d9c-9195-15d8e99cf622",
            "9fc05ed5-0876-47c6-8514-5ed3d28ded33"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5284,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "772020de-9654-4042-bd81-f3bb1066249a",
      "title": "",
      "fullFile": "cypress/e2e/2-advanced-examples/viewport.cy.js",
      "file": "cypress/e2e/2-advanced-examples/viewport.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "c8f9b7bc-eaa8-45f4-b262-f8ed398377a3",
          "title": "Viewport",
          "fullFile": "cypress/e2e/2-advanced-examples/viewport.cy.js",
          "file": "cypress/e2e/2-advanced-examples/viewport.cy.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "cy.viewport() - set the viewport size and dimension",
              "fullTitle": "Viewport cy.viewport() - set the viewport size and dimension",
              "timedOut": null,
              "duration": 12875,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/viewport.cy.js.mp4\"\n    }\n]",
              "code": "// https://on.cypress.io/viewport\ncy.get('#navbar').should('be.visible');\ncy.viewport(320, 480);\n// the navbar should have collapse since our screen is smaller\ncy.get('#navbar').should('not.be.visible');\ncy.get('.navbar-toggle').should('be.visible').click();\ncy.get('.nav').find('a').should('be.visible');\n// lets see what our app looks like on a super large screen\ncy.viewport(2999, 2999);\n// cy.viewport() accepts a set of preset sizes\n// to easily set the screen to a device's width and height\n// We added a cy.wait() between each viewport change so you can see\n// the change otherwise it is a little too fast to see :)\ncy.viewport('macbook-15');\ncy.wait(200);\ncy.viewport('macbook-13');\ncy.wait(200);\ncy.viewport('macbook-11');\ncy.wait(200);\ncy.viewport('ipad-2');\ncy.wait(200);\ncy.viewport('ipad-mini');\ncy.wait(200);\ncy.viewport('iphone-6+');\ncy.wait(200);\ncy.viewport('iphone-6');\ncy.wait(200);\ncy.viewport('iphone-5');\ncy.wait(200);\ncy.viewport('iphone-4');\ncy.wait(200);\ncy.viewport('iphone-3');\ncy.wait(200);\n// cy.viewport() accepts an orientation for all presets\n// the default orientation is 'portrait'\ncy.viewport('ipad-2', 'portrait');\ncy.wait(200);\ncy.viewport('iphone-4', 'landscape');\ncy.wait(200);\n// The viewport will be reset back to the default dimensions\n// in between tests (the  default can be set in cypress.config.{js|ts})",
              "err": {},
              "uuid": "71aceedb-e89f-4b25-bd12-267eb579755e",
              "parentUUID": "c8f9b7bc-eaa8-45f4-b262-f8ed398377a3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "71aceedb-e89f-4b25-bd12-267eb579755e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 12875,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "a078d84f-83d5-464d-8470-032f8f6367aa",
      "title": "",
      "fullFile": "cypress/e2e/2-advanced-examples/waiting.cy.js",
      "file": "cypress/e2e/2-advanced-examples/waiting.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "c53e01f6-f8ed-4a19-b85b-fed7492ef1ad",
          "title": "Waiting",
          "fullFile": "cypress/e2e/2-advanced-examples/waiting.cy.js",
          "file": "cypress/e2e/2-advanced-examples/waiting.cy.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "cy.wait() - wait for a specific amount of time",
              "fullTitle": "Waiting cy.wait() - wait for a specific amount of time",
              "timedOut": null,
              "duration": 12539,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/waiting.cy.js.mp4\"\n    }\n]",
              "code": "cy.get('.wait-input1').type('Wait 1000ms after typing');\ncy.wait(1000);\ncy.get('.wait-input2').type('Wait 1000ms after typing');\ncy.wait(1000);\ncy.get('.wait-input3').type('Wait 1000ms after typing');\ncy.wait(1000);",
              "err": {},
              "uuid": "aafe873e-6990-40ea-8168-6bcfc158c236",
              "parentUUID": "c53e01f6-f8ed-4a19-b85b-fed7492ef1ad",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.wait() - wait for a specific route",
              "fullTitle": "Waiting cy.wait() - wait for a specific route",
              "timedOut": null,
              "duration": 1473,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/waiting.cy.js.mp4\"\n    }\n]",
              "code": "// Listen to GET to comments/1\ncy.intercept('GET', '**/comments/*').as('getComment');\n// we have code that gets a comment when\n// the button is clicked in scripts.js\ncy.get('.network-btn').click();\n// wait for GET comments/1\ncy.wait('@getComment').its('response.statusCode').should('be.oneOf', [200, 304]);",
              "err": {},
              "uuid": "5f03fe28-3c0a-4899-8bb7-0065e272a78f",
              "parentUUID": "c53e01f6-f8ed-4a19-b85b-fed7492ef1ad",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "aafe873e-6990-40ea-8168-6bcfc158c236",
            "5f03fe28-3c0a-4899-8bb7-0065e272a78f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 14012,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "d3635489-8d7a-41a7-a4a9-557eb7ac44a9",
      "title": "",
      "fullFile": "cypress/e2e/2-advanced-examples/window.cy.js",
      "file": "cypress/e2e/2-advanced-examples/window.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "59ca2dea-7985-41b4-97c3-f7b17ced2675",
          "title": "Window",
          "fullFile": "cypress/e2e/2-advanced-examples/window.cy.js",
          "file": "cypress/e2e/2-advanced-examples/window.cy.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "cy.window() - get the global window object",
              "fullTitle": "Window cy.window() - get the global window object",
              "timedOut": null,
              "duration": 3170,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/window.cy.js.mp4\"\n    }\n]",
              "code": "// https://on.cypress.io/window\ncy.window().should('have.property', 'top');",
              "err": {},
              "uuid": "b429add8-8c56-4925-8659-54546e2ab2ae",
              "parentUUID": "59ca2dea-7985-41b4-97c3-f7b17ced2675",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.document() - get the document object",
              "fullTitle": "Window cy.document() - get the document object",
              "timedOut": null,
              "duration": 324,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/window.cy.js.mp4\"\n    }\n]",
              "code": "// https://on.cypress.io/document\ncy.document().should('have.property', 'charset').and('eq', 'UTF-8');",
              "err": {},
              "uuid": "8681f9af-1cbb-4fe7-97ea-bca6cd415f26",
              "parentUUID": "59ca2dea-7985-41b4-97c3-f7b17ced2675",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.title() - get the title",
              "fullTitle": "Window cy.title() - get the title",
              "timedOut": null,
              "duration": 320,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/2-advanced-examples/window.cy.js.mp4\"\n    }\n]",
              "code": "// https://on.cypress.io/title\ncy.title().should('include', 'Kitchen Sink');",
              "err": {},
              "uuid": "807b908f-0327-410c-be4c-5387da970e0b",
              "parentUUID": "59ca2dea-7985-41b4-97c3-f7b17ced2675",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b429add8-8c56-4925-8659-54546e2ab2ae",
            "8681f9af-1cbb-4fe7-97ea-bca6cd415f26",
            "807b908f-0327-410c-be4c-5387da970e0b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3814,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "008ccc57-23b1-47b2-993b-c9d12d22e85c",
      "title": "",
      "fullFile": "cypress/e2e/1-getting-started/todo.cy.js",
      "file": "cypress/e2e/1-getting-started/todo.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "0f648f26-17da-44a9-a47e-5f03b00051e0",
          "title": "example to-do app",
          "fullFile": "cypress/e2e/1-getting-started/todo.cy.js",
          "file": "cypress/e2e/1-getting-started/todo.cy.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "displays two todo items by default",
              "fullTitle": "example to-do app displays two todo items by default",
              "timedOut": null,
              "duration": 6455,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/1-getting-started/todo.cy.js.mp4\"\n    }\n]",
              "code": "// We use the `cy.get()` command to get all elements that match the selector.\n// Then, we use `should` to assert that there are two matched items,\n// which are the two default items.\ncy.get('.todo-list li').should('have.length', 2);\n// We can go even further and check that the default todos each contain\n// the correct text. We use the `first` and `last` functions\n// to get just the first and last matched elements individually,\n// and then perform an assertion with `should`.\ncy.get('.todo-list li').first().should('have.text', 'Pay electric bill');\ncy.get('.todo-list li').last().should('have.text', 'Walk the dog');",
              "err": {},
              "uuid": "9b0ab8f6-fbaf-4073-9086-792a20fa7b61",
              "parentUUID": "0f648f26-17da-44a9-a47e-5f03b00051e0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "can add new todo items",
              "fullTitle": "example to-do app can add new todo items",
              "timedOut": null,
              "duration": 7553,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/1-getting-started/todo.cy.js.mp4\"\n    }\n]",
              "code": "// We'll store our item text in a variable so we can reuse it\nconst newItem = 'Feed the cat';\n// Let's get the input element and use the `type` command to\n// input our new list item. After typing the content of our item,\n// we need to type the enter key as well in order to submit the input.\n// This input has a data-test attribute so we'll use that to select the\n// element in accordance with best practices:\n// https://on.cypress.io/selecting-elements\ncy.get('[data-test=new-todo]').type(`${newItem}{enter}`);\n// Now that we've typed our new item, let's check that it actually was added to the list.\n// Since it's the newest item, it should exist as the last element in the list.\n// In addition, with the two default items, we should have a total of 3 elements in the list.\n// Since assertions yield the element that was asserted on,\n// we can chain both of these assertions together into a single statement.\ncy.get('.todo-list li').should('have.length', 3).last().should('have.text', newItem);",
              "err": {},
              "uuid": "30208421-b143-4e62-9eb0-946f01add92a",
              "parentUUID": "0f648f26-17da-44a9-a47e-5f03b00051e0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "can check off an item as completed",
              "fullTitle": "example to-do app can check off an item as completed",
              "timedOut": null,
              "duration": 7862,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/1-getting-started/todo.cy.js.mp4\"\n    }\n]",
              "code": "// In addition to using the `get` command to get an element by selector,\n// we can also use the `contains` command to get an element by its contents.\n// However, this will yield the <label>, which is lowest-level element that contains the text.\n// In order to check the item, we'll find the <input> element for this <label>\n// by traversing up the dom to the parent element. From there, we can `find`\n// the child checkbox <input> element and use the `check` command to check it.\ncy.contains('Pay electric bill').parent().find('input[type=checkbox]').check();\n// Now that we've checked the button, we can go ahead and make sure\n// that the list element is now marked as completed.\n// Again we'll use `contains` to find the <label> element and then use the `parents` command\n// to traverse multiple levels up the dom until we find the corresponding <li> element.\n// Once we get that element, we can assert that it has the completed class.\ncy.contains('Pay electric bill').parents('li').should('have.class', 'completed');",
              "err": {},
              "uuid": "bcccd7d8-6605-4e7d-889f-924af648b040",
              "parentUUID": "0f648f26-17da-44a9-a47e-5f03b00051e0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "fb0a6fa2-4f42-4d0e-a02f-94cce375131f",
              "title": "with a checked task",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "can filter for uncompleted tasks",
                  "fullTitle": "example to-do app with a checked task can filter for uncompleted tasks",
                  "timedOut": null,
                  "duration": 8297,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/1-getting-started/todo.cy.js.mp4\"\n    }\n]",
                  "code": "// We'll click on the \"active\" button in order to\n// display only incomplete items\ncy.contains('Active').click();\n// After filtering, we can assert that there is only the one\n// incomplete item in the list.\ncy.get('.todo-list li').should('have.length', 1).first().should('have.text', 'Walk the dog');\n// For good measure, let's also assert that the task we checked off\n// does not exist on the page.\ncy.contains('Pay electric bill').should('not.exist');",
                  "err": {},
                  "uuid": "16c113f1-fccf-4a54-8bb2-2d9d2ff79796",
                  "parentUUID": "fb0a6fa2-4f42-4d0e-a02f-94cce375131f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can filter for completed tasks",
                  "fullTitle": "example to-do app with a checked task can filter for completed tasks",
                  "timedOut": null,
                  "duration": 7590,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/1-getting-started/todo.cy.js.mp4\"\n    }\n]",
                  "code": "// We can perform similar steps as the test above to ensure\n// that only completed tasks are shown\ncy.contains('Completed').click();\ncy.get('.todo-list li').should('have.length', 1).first().should('have.text', 'Pay electric bill');\ncy.contains('Walk the dog').should('not.exist');",
                  "err": {},
                  "uuid": "d6915e6c-cd88-493a-a5d9-0f6b8e15f383",
                  "parentUUID": "fb0a6fa2-4f42-4d0e-a02f-94cce375131f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can delete all completed tasks",
                  "fullTitle": "example to-do app with a checked task can delete all completed tasks",
                  "timedOut": null,
                  "duration": 8103,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "[\n    {\n        \"title\": \"Spec video recording\",\n        \"value\": \"videos/1-getting-started/todo.cy.js.mp4\"\n    }\n]",
                  "code": "// First, let's click the \"Clear completed\" button\n// `contains` is actually serving two purposes here.\n// First, it's ensuring that the button exists within the dom.\n// This button only appears when at least one task is checked\n// so this command is implicitly verifying that it does exist.\n// Second, it selects the button so we can click it.\ncy.contains('Clear completed').click();\n// Then we can make sure that there is only one element\n// in the list and our element does not exist\ncy.get('.todo-list li').should('have.length', 1).should('not.have.text', 'Pay electric bill');\n// Finally, make sure that the clear button no longer exists.\ncy.contains('Clear completed').should('not.exist');",
                  "err": {},
                  "uuid": "4bcd0958-90a9-4132-8d6a-daad46776d56",
                  "parentUUID": "fb0a6fa2-4f42-4d0e-a02f-94cce375131f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "16c113f1-fccf-4a54-8bb2-2d9d2ff79796",
                "d6915e6c-cd88-493a-a5d9-0f6b8e15f383",
                "4bcd0958-90a9-4132-8d6a-daad46776d56"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 23990,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "9b0ab8f6-fbaf-4073-9086-792a20fa7b61",
            "30208421-b143-4e62-9eb0-946f01add92a",
            "bcccd7d8-6605-4e7d-889f-924af648b040"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 21870,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "saveJson": true,
        "charts": true,
        "reportPageTitle": "api-automation",
        "embeddedScreenshots": true,
        "inlineAssets": true,
        "saveAllAttempts": false,
        "reporterDir": "cypress/reports",
        "reportTitle": "test results",
        "overwrite": false,
        "html": false,
        "json": true,
        "reportDir": "cypress/reports/html/.jsons"
      },
      "version": "6.2.0"
    }
  }
}